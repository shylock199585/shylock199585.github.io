<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Matplotlib进行简单绘图</title>
    <url>/2020/07/31/Matplotlib/</url>
    <content><![CDATA[<p>数据可视化库（Matplotlib）</p>
<h2 id="1-常规绘图方法"><a href="#1-常规绘图方法" class="headerlink" title="1. 常规绘图方法"></a>1. 常规绘图方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>])</span><br><span class="line">plt.xlabel(<span class="string">'xlabel'</span>, fontsize = <span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">'ylabel'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Text(0, 0.5, &apos;ylabel&apos;)</code></pre><a id="more"></a>




<h3 id="1-1-细节设置"><a href="#1-1-细节设置" class="headerlink" title="1.1 细节设置"></a>1.1 细节设置</h3><p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1gha53g5943j30k10bw753.jpg" alt="image.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1gha54oyoq0j30kb07zgly.jpg" alt="image.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>],<span class="string">'-.'</span>,color = <span class="string">'r'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'xlabel'</span>, fontsize = <span class="number">16</span>)</span><br><span class="line">plt.ylabel(<span class="string">'ylabel'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Text(0, 0.5, &apos;ylabel&apos;)</code></pre><p><img src="/2020/07/31/Matplotlib/output_7_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array = np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">0.5</span>)</span><br><span class="line">plt.plot(array,array,<span class="string">'r--'</span>)</span><br><span class="line">plt.plot(array,array ** <span class="number">2</span>, <span class="string">'bs'</span>)</span><br><span class="line">plt.plot(array,array ** <span class="number">3</span>, <span class="string">'go'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x20291197cc0&gt;]</code></pre><p><img src="/2020/07/31/Matplotlib/output_8_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-10</span>,<span class="number">10</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x,y,linewidth = <span class="number">3.0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x20291252a58&gt;]</code></pre><p><img src="/2020/07/31/Matplotlib/output_9_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-10</span>,<span class="number">10</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x,y, color = <span class="string">'b'</span>,linestyle = <span class="string">':'</span>, marker = <span class="string">'o'</span>, markerfacecolor = <span class="string">'r'</span>, markersize = <span class="number">10</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x202912c46a0&gt;]</code></pre><p><img src="/2020/07/31/Matplotlib/output_10_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line = plt.plot(x,y)</span><br><span class="line"><span class="comment">#alpha表示透明度</span></span><br><span class="line">plt.setp(line,color = <span class="string">'r'</span>, linewidth = <span class="number">2.0</span>, alpha = <span class="number">0.4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[None, None, None]</code></pre><p><img src="/2020/07/31/Matplotlib/output_11_1.png" alt="png"></p>
<h3 id="1-2-子图与标注"><a href="#1-2-子图与标注" class="headerlink" title="1.2 子图与标注"></a>1.2 子图与标注</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(x,y,color = <span class="string">'r'</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.plot(x,y,color = <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x202913e1e10&gt;]</code></pre><p><img src="/2020/07/31/Matplotlib/output_13_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">plt.plot(x,y,color = <span class="string">'r'</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">plt.plot(x,y,color = <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x2029152ee10&gt;]</code></pre><p><img src="/2020/07/31/Matplotlib/output_14_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplot(<span class="number">321</span>)</span><br><span class="line">plt.plot(x,y,color = <span class="string">'r'</span>)</span><br><span class="line">plt.subplot(<span class="number">324</span>)</span><br><span class="line">plt.plot(x,y,color = <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x20292784eb8&gt;]</code></pre><p><img src="/2020/07/31/Matplotlib/output_15_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#标注解释说明</span></span><br><span class="line">plt.plot(x,y,color = <span class="string">'b'</span>, linestyle = <span class="string">':'</span>, marker = <span class="string">'o'</span>, markerfacecolor = <span class="string">'r'</span>, markersize = <span class="number">10</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x:---'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y:---'</span>)</span><br><span class="line"><span class="comment">#图题</span></span><br><span class="line">plt.title(<span class="string">'1231231'</span>)</span><br><span class="line"><span class="comment">#指定坐标叫注释</span></span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>, <span class="string">'yuandian'</span>)</span><br><span class="line"><span class="comment">#显示网格</span></span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#添加箭头，指定箭头的起始终止点和属性</span></span><br><span class="line">plt.annotate(<span class="string">'jiadedian'</span>, xy=(<span class="number">-5</span>,<span class="number">0</span>),xytext=(<span class="number">-2</span>,<span class="number">0.3</span>), arrowprops = dict(facecolor = <span class="string">'red'</span>, shrink=<span class="number">0.05</span>,headlength = <span class="number">20</span>, headwidth=<span class="number">20</span>) )</span><br></pre></td></tr></table></figure>




<pre><code>Text(-2, 0.3, &apos;jiadedian&apos;)</code></pre><p><img src="/2020/07/31/Matplotlib/output_16_1.png" alt="png"></p>
<h3 id="1-3-风格设置"><a href="#1-3-风格设置" class="headerlink" title="1.3 风格设置"></a>1.3 风格设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.style.available</span><br></pre></td></tr></table></figure>




<pre><code>[&apos;bmh&apos;,
 &apos;classic&apos;,
 &apos;dark_background&apos;,
 &apos;fast&apos;,
 &apos;fivethirtyeight&apos;,
 &apos;ggplot&apos;,
 &apos;grayscale&apos;,
 &apos;seaborn-bright&apos;,
 &apos;seaborn-colorblind&apos;,
 &apos;seaborn-dark-palette&apos;,
 &apos;seaborn-dark&apos;,
 &apos;seaborn-darkgrid&apos;,
 &apos;seaborn-deep&apos;,
 &apos;seaborn-muted&apos;,
 &apos;seaborn-notebook&apos;,
 &apos;seaborn-paper&apos;,
 &apos;seaborn-pastel&apos;,
 &apos;seaborn-poster&apos;,
 &apos;seaborn-talk&apos;,
 &apos;seaborn-ticks&apos;,
 &apos;seaborn-white&apos;,
 &apos;seaborn-whitegrid&apos;,
 &apos;seaborn&apos;,
 &apos;Solarize_Light2&apos;,
 &apos;tableau-colorblind10&apos;,
 &apos;_classic_test&apos;]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#plt.style.use('dark_background')</span></span><br><span class="line"><span class="comment"># plt.style.use('bmh')</span></span><br><span class="line">plt.style.use(<span class="string">'ggplot'</span>)</span><br><span class="line">plt.plot(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x20292977978&gt;]</code></pre><p><img src="/2020/07/31/Matplotlib/output_19_1.png" alt="png"></p>
<h2 id="2-常用图表绘制"><a href="#2-常用图表绘制" class="headerlink" title="2. 常用图表绘制"></a>2. 常用图表绘制</h2><h3 id="2-1-条形图"><a href="#2-1-条形图" class="headerlink" title="2.1 条形图"></a>2.1 条形图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.style.use(<span class="string">'seaborn'</span>)</span><br><span class="line">patterns = (<span class="string">'-'</span>, <span class="string">'+'</span>, <span class="string">'x'</span>, <span class="string">'\\'</span>,<span class="string">'*'</span>, <span class="string">'o'</span>, <span class="string">'O'</span>, <span class="string">'.'</span>)</span><br><span class="line">mean_value = range(<span class="number">1</span>, len(patterns) + <span class="number">1</span>)</span><br><span class="line">x_pos = list(range(len(mean_value)))</span><br><span class="line">bars = plt.bar(x_pos, mean_value, color = <span class="string">'white'</span>)</span><br><span class="line"><span class="keyword">for</span> bar, pattern <span class="keyword">in</span> zip(bars, patterns):</span><br><span class="line">    bar.set_hatch(pattern)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2020/07/31/Matplotlib/output_22_0.png" alt="png"></p>
<h3 id="2-2-盒图"><a href="#2-2-盒图" class="headerlink" title="2.2 盒图"></a>2.2 盒图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [np.random.normal(<span class="number">0</span>,std,<span class="number">100</span>) <span class="keyword">for</span> std <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">4</span>)]</span><br><span class="line">fig = plt.figure(figsize = (<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">plt.boxplot(data, sym = <span class="string">'s'</span>, vert = <span class="literal">True</span>)</span><br><span class="line">plt.xticks([y+<span class="number">1</span> <span class="keyword">for</span> y <span class="keyword">in</span> range(len(data))], [<span class="string">'x1'</span>,<span class="string">'x2'</span>,<span class="string">'x3'</span>])</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'box plot'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>Text(0, 0.5, &apos;box plot&apos;)</code></pre><p><img src="/2020/07/31/Matplotlib/output_24_1.png" alt="png"></p>
<h3 id="2-3-直方图和散点图"><a href="#2-3-直方图和散点图" class="headerlink" title="2.3 直方图和散点图"></a>2.3 直方图和散点图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = np.random.normal(<span class="number">0</span>,<span class="number">20</span>,<span class="number">1000</span>)</span><br><span class="line">bins = np.arange(<span class="number">-100</span>,<span class="number">100</span>,<span class="number">5</span>)</span><br><span class="line">plt.hist(data,bins=bins)</span><br><span class="line">plt.xlim([min(data) - <span class="number">5</span>, max(data) + <span class="number">5</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2020/07/31/Matplotlib/output_26_0.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">1000</span></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line">plt.scatter(x, y, alpha = <span class="number">0.3</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2020/07/31/Matplotlib/output_27_0.png" alt="png"></p>
<h3 id="2-4-3D图"><a href="#2-4-3D图" class="headerlink" title="2.4 3D图"></a>2.4 3D图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>,projection = <span class="string">'3d'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>


<p><img src="/2020/07/31/Matplotlib/output_29_0.png" alt="png"></p>
<h3 id="2-5-布局设置"><a href="#2-5-布局设置" class="headerlink" title="2.5 布局设置"></a>2.5 布局设置</h3><p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1gha6m5m47tj30et098t9j.jpg" alt="image.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#嵌套子图</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line">y2 = np.sin(x**<span class="number">2</span>)</span><br><span class="line">y1 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fig, ax1 = plt.subplots()</span><br><span class="line">left,bottom,width,height = [<span class="number">0.22</span>,<span class="number">0.45</span>,<span class="number">0.3</span>,<span class="number">0.35</span>]</span><br><span class="line">ax2 = fig.add_axes([left,bottom,width,height])</span><br><span class="line">ax1.plot(x,y1)</span><br><span class="line">ax2.plot(x,y2)</span><br></pre></td></tr></table></figure>




<pre><code>[&lt;matplotlib.lines.Line2D at 0x20294514828&gt;]</code></pre><p><img src="/2020/07/31/Matplotlib/output_32_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Matplotlib</category>
      </categories>
      <tags>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建简要过程</title>
    <url>/2020/07/05/hexo%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><p><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a><br><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></p>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h4><p>安装 Hexo 完成后，执行下列命令，在指定文件夹中新建所需要的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt; <span class="comment"># 初始化项目名称 </span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt; </span><br><span class="line">$ npm install <span class="comment"># 安装模块</span></span><br></pre></td></tr></table></figure>

<h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean <span class="comment"># 必要时，清除上次生成页面时造成的缓存 </span></span><br><span class="line">$ hexo g  <span class="comment"># 生成静态页面 </span></span><br><span class="line">$ hexo s  <span class="comment"># 在本地启动Hexo，可以在浏览器访问 localhost:4000 来预览</span></span><br></pre></td></tr></table></figure>

<h4 id="GitHub-支持"><a href="#GitHub-支持" class="headerlink" title="GitHub 支持"></a>GitHub 支持</h4><p>在 GitHub 按照 <code>username.github.io</code> 格式新建仓库，然后在项目根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>打开 <code>_config.yml</code> ，编辑 <code>deploy</code>字段，注意替换用户名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourusername&#x2F;yourusername.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>配置完成后，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>将本地内容部署在 GitHub 中，输入域名 <code>username.github.io</code> 进行访问</p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><blockquote>
<p>如果不喜欢默认主题，可以参考如下方式更改。</p>
</blockquote>
<p>要把主题更换为Next，先定位到Hexo站点目录进行主题下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>打开站点配置文件 <code>_config.yml</code>，修改 <code>theme</code> 字段值为 <code>next</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h4 id="修改Scheme"><a href="#修改Scheme" class="headerlink" title="修改Scheme"></a>修改Scheme</h4><p>在主题配置文件 <code>themes/next/_config.yml</code> 中进行修改，通过注释和反注释三选一。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br></pre></td></tr></table></figure>
<h4 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h4><p>在主题配置文件中，找到 <code>menu</code> 字段并进行适当修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives &#x2F;&#x2F;归档</span><br><span class="line">  about: &#x2F;about</span><br><span class="line">  categories: &#x2F;categories  &#x2F;&#x2F;分类</span><br><span class="line">  tags: &#x2F;tags   &#x2F;&#x2F;标签</span><br><span class="line">  #commonweal: &#x2F;404.html</span><br></pre></td></tr></table></figure>
<h4 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h4><p>在主题配置文件中修改 <code>avatar</code> 字段，可以图片存在 <code>next/source/images</code> 目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source&#x2F;images): &#x2F;images&#x2F;avatar.jpg</span><br><span class="line"># in site  directory(source&#x2F;uploads): &#x2F;uploads&#x2F;avatar.jpg</span><br><span class="line">avatar: &#x2F;images&#x2F;avatar.jpg</span><br></pre></td></tr></table></figure>

<h4 id="进阶设定"><a href="#进阶设定" class="headerlink" title="进阶设定"></a>进阶设定</h4><p>官方文档介绍的很详细，请首先查阅<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next使用文档</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy的基本操作</title>
    <url>/2020/07/30/Numpy/</url>
    <content><![CDATA[<h1 id="1-Numpy的基本操作"><a href="#1-Numpy的基本操作" class="headerlink" title="1. Numpy的基本操作"></a>1. Numpy的基本操作</h1><p>导入numpy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<h3 id="1-1-array数组"><a href="#1-1-array数组" class="headerlink" title="1.1 array数组"></a>1.1 array数组</h3><p>定义数组array = [1,2,3,4,5]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">array2 = array + <span class="number">1</span></span><br><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 3, 4, 5, 6])</code></pre><a id="more"></a>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array2 +array</span><br></pre></td></tr></table></figure>




<pre><code>array([ 3,  5,  7,  9, 11])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array2 * array</span><br></pre></td></tr></table></figure>




<pre><code>array([ 2,  6, 12, 20, 30])</code></pre><h3 id="1-2-数组特性"><a href="#1-2-数组特性" class="headerlink" title="1.2 数组特性"></a>1.2 数组特性</h3><p>查看数组维度信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape</span><br></pre></td></tr></table></figure>




<pre><code>(5,)</code></pre><p>定义二维数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">         [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3],
       [4, 5, 6]])</code></pre><p>列表转为numpy数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">array1</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 2, 3, 4, 5])</code></pre><p>列表数据类型不同时，自动向下转换：int→float→str</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'5'</span>]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">array1</span><br></pre></td></tr></table></figure>




<pre><code>array([&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;], dtype=&apos;&lt;U11&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5.0</span>]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">array1</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 2., 3., 4., 5.])</code></pre><h3 id="1-3-数组属性操作"><a href="#1-3-数组属性操作" class="headerlink" title="1.3 数组属性操作"></a>1.3 数组属性操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印当前数据格式</span></span><br><span class="line">type(array1)</span><br></pre></td></tr></table></figure>




<pre><code>numpy.ndarray</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印当前数据类型</span></span><br><span class="line">array1.dtype</span><br></pre></td></tr></table></figure>




<pre><code>dtype(&apos;float64&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印当前数组元素个数</span></span><br><span class="line">array1.size</span><br></pre></td></tr></table></figure>




<pre><code>5</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印当前数组维度</span></span><br><span class="line">array1.ndim</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre><h2 id="2-索引与切片"><a href="#2-索引与切片" class="headerlink" title="2. 索引与切片"></a>2. 索引与切片</h2><h3 id="2-1-数值索引"><a href="#2-1-数值索引" class="headerlink" title="2.1 数值索引"></a>2.1 数值索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array1[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">array1[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array1 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">                  [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">array1[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">array1</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1,  2,  3],
       [ 4, 10,  6],
       [ 7,  8,  9]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取第二行数据</span></span><br><span class="line">array1[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([ 4, 10,  6])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取所有行的第二列</span></span><br><span class="line">array1[:,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([ 2, 10,  8])</code></pre><h3 id="2-2-bool索引"><a href="#2-2-bool索引" class="headerlink" title="2.2 bool索引"></a>2.2 bool索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mask = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],dtype=bool)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取所有位置为True的元素</span></span><br><span class="line">array[mask]</span><br></pre></td></tr></table></figure>




<pre><code>array([30, 40, 50, 80, 90])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#(0,1)区间随机生成10个数</span></span><br><span class="line">random_array = np.random.rand(<span class="number">10</span>)</span><br><span class="line">random_array</span><br></pre></td></tr></table></figure>




<pre><code>array([0.14346121, 0.10379705, 0.75719041, 0.3301816 , 0.02267718,
       0.90297419, 0.51393754, 0.99605731, 0.75787412, 0.90175181])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mask = random_array &gt; <span class="number">0.5</span></span><br><span class="line">mask</span><br></pre></td></tr></table></figure>




<pre><code>array([False, False,  True, False, False,  True,  True,  True,  True,
        True])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>])</span><br><span class="line"><span class="comment">#找到符合要求的索引位置</span></span><br><span class="line">np.where(array &gt; <span class="number">30</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([3, 4], dtype=int64),)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组对比</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>])</span><br><span class="line">x ==y</span><br></pre></td></tr></table></figure>




<pre><code>array([ True,  True,  True, False])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#逻辑判断</span></span><br><span class="line">np.logical_and(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>array([ True,  True,  True,  True])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.logical_or(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>array([ True,  True,  True,  True])</code></pre><h2 id="3-数据类型与数值计算"><a href="#3-数据类型与数值计算" class="headerlink" title="3. 数据类型与数值计算"></a>3. 数据类型与数值计算</h2><h3 id="3-1-数据类型"><a href="#3-1-数据类型" class="headerlink" title="3.1 数据类型"></a>3.1 数据类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定数据类型</span></span><br><span class="line">array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],dtype=np.float32)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 2., 3., 4., 5.], dtype=float32)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.dtype</span><br></pre></td></tr></table></figure>




<pre><code>dtype(&apos;float32&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Numpy中字符串的类型是object，和python不一样</span></span><br><span class="line">array = np.array([<span class="string">'1'</span>,<span class="string">'10'</span>,<span class="string">'3.5'</span>,<span class="string">'str'</span>],dtype=object)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([&apos;1&apos;, &apos;10&apos;, &apos;3.5&apos;, &apos;str&apos;], dtype=object)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对创建好的数据进行数据类型转换</span></span><br><span class="line">array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">array2 = np.asarray(array,dtype=np.float32)</span><br><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 2., 3., 4., 5.], dtype=float32)</code></pre><h3 id="3-2-复制与赋值"><a href="#3-2-复制与赋值" class="headerlink" title="3.2 复制与赋值"></a>3.2 复制与赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等号赋值，对其中一个变量修改，另一个也发生变化</span></span><br><span class="line">array2 = array</span><br><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 2, 3, 4, 5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([  1, 100,   3,   4,   5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([  1, 100,   3,   4,   5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用copy赋值</span></span><br><span class="line">array2 = array.copy()</span><br><span class="line">array2[<span class="number">1</span>] = <span class="number">1000</span></span><br><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([   1, 1000,    3,    4,    5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([  1, 100,   3,   4,   5])</code></pre><h3 id="3-3-数值计算"><a href="#3-3-数值计算" class="headerlink" title="3.3 数值计算"></a>3.3 数值计算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所有元素求和</span></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.sum(array)</span><br></pre></td></tr></table></figure>




<pre><code>21</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按列求和</span></span><br><span class="line">np.sum(array,axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([5, 7, 9])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按行求和</span></span><br><span class="line">np.sum(array,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([ 6, 15])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#各个元素累乘</span></span><br><span class="line">array.prod()</span><br></pre></td></tr></table></figure>




<pre><code>720</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.prod(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([ 4, 10, 18])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.prod(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([  6, 120])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求元素的最小值</span></span><br><span class="line">array.min()</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.min(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 2, 3])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.min(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 4])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求均值</span></span><br><span class="line">array.mean()</span><br></pre></td></tr></table></figure>




<pre><code>3.5</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.mean(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([2.5, 3.5, 4.5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.mean(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([2., 5.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求标准差</span></span><br><span class="line">array.std()</span><br></pre></td></tr></table></figure>




<pre><code>1.707825127659933</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求方差</span></span><br><span class="line">array.var()</span><br></pre></td></tr></table></figure>




<pre><code>2.9166666666666665</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#比2小的全部为2，比4大的全部为4</span></span><br><span class="line">array.clip(<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[2, 2, 3],
       [4, 4, 4]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#四舍五入</span></span><br><span class="line">array = np.array([<span class="number">1.2</span>,<span class="number">3.56</span>,<span class="number">6.41</span>])</span><br><span class="line">array.round()</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 4., 6.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定精度</span></span><br><span class="line">array.round(decimals=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([1.2, 3.6, 6.4])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最小值索引位置</span></span><br><span class="line">array.argmin()</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.argmin(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre><h3 id="3-4-矩阵乘法"><a href="#3-4-矩阵乘法" class="headerlink" title="3.4 矩阵乘法"></a>3.4 矩阵乘法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对应元素相乘</span></span><br><span class="line">x = np.array([<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line">np.multiply(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>array([ 6, 20])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#矩阵乘法</span></span><br><span class="line">np.dot(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>26</code></pre><h2 id="4-常用功能模块"><a href="#4-常用功能模块" class="headerlink" title="4. 常用功能模块"></a>4. 常用功能模块</h2><h3 id="4-1-排序操作"><a href="#4-1-排序操作" class="headerlink" title="4.1 排序操作"></a>4.1 排序操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.array([[<span class="number">1.2</span>,<span class="number">5.2</span>,<span class="number">3.4</span>],[<span class="number">5.7</span>,<span class="number">3.1</span>,<span class="number">7.1</span>]])</span><br><span class="line">np.sort(array)</span><br></pre></td></tr></table></figure>




<pre><code>array([[1.2, 3.4, 5.2],
       [3.1, 5.7, 7.1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#排序后显示索引位置</span></span><br><span class="line">np.argsort(array)</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 2, 1],
       [1, 0, 2]], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在（0,10）之间生成10个随机数</span></span><br><span class="line">array = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([ 0.        ,  1.11111111,  2.22222222,  3.33333333,  4.44444444,
        5.55555556,  6.66666667,  7.77777778,  8.88888889, 10.        ])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">values = np.array([<span class="number">3.5</span>,<span class="number">2.7</span>,<span class="number">5.8</span>])</span><br><span class="line">np.searchsorted(array,values)</span><br></pre></td></tr></table></figure>




<pre><code>array([4, 3, 6], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">45</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>]])</span><br><span class="line">index = np.lexsort([<span class="number">-1</span>*array[:,<span class="number">0</span>]])</span><br><span class="line">index</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 3, 0, 1], dtype=int64)</code></pre><h3 id="4-2-数组形状"><a href="#4-2-数组形状" class="headerlink" title="4.2 数组形状"></a>4.2 数组形状</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.arange(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape</span><br></pre></td></tr></table></figure>




<pre><code>(10,)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape = <span class="number">2</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 1, 2, 3, 4],
       [5, 6, 7, 8, 9]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.arange(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">array = array[np.newaxis,:]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape</span><br></pre></td></tr></table></figure>




<pre><code>(1, 10)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.squeeze()</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape</span><br></pre></td></tr></table></figure>




<pre><code>(1, 10)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组转置</span></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>],[<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]])</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3],
       [2, 5, 3],
       [6, 4, 1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为啥不行呢？</span></span><br><span class="line">array.transpose()</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3],
       [2, 5, 3],
       [6, 4, 1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.T</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 6],
       [2, 5, 4],
       [3, 3, 1]])</code></pre><h3 id="4-3-数组的拼接"><a href="#4-3-数组的拼接" class="headerlink" title="4.3 数组的拼接"></a>4.3 数组的拼接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">np.concatenate((a,b))</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 11, 12]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.concatenate((a,b),axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1,  2,  3,  7,  8,  9],
       [ 4,  5,  6, 10, 11, 12]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#另一种拼接方法,直接增加一个维度</span></span><br><span class="line">np.stack((a,b))</span><br></pre></td></tr></table></figure>




<pre><code>array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])</code></pre><h3 id="4-4-创建数组函数"><a href="#4-4-创建数组函数" class="headerlink" title="4.4 创建数组函数"></a>4.4 创建数组函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#快速创建行向量</span></span><br><span class="line">np.r_[<span class="number">0</span>:<span class="number">5</span>:<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3, 4])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#快速创建列向量</span></span><br><span class="line">np.c_[<span class="number">0</span>:<span class="number">5</span>:<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([[0],
       [1],
       [2],
       [3],
       [4]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建零矩阵</span></span><br><span class="line">np.zeros(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([0., 0., 0.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.zeros((<span class="number">3</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">3</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">3</span>,<span class="number">3</span>)) * <span class="number">8</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[8., 8., 8.],
       [8., 8., 8.],
       [8., 8., 8.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.empty(<span class="number">6</span>)</span><br><span class="line">a.fill(<span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 1., 1., 1., 1., 1.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.identity(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])</code></pre><h3 id="4-5-随机模块"><a href="#4-5-随机模块" class="headerlink" title="4.5 随机模块"></a>4.5 随机模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.rand(<span class="number">3</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[0.58755743, 0.58962059],
       [0.03991693, 0.00247106],
       [0.44385432, 0.09460355]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回区间（0,10）的随机整数</span></span><br><span class="line">np.random.randint(<span class="number">10</span>,size = (<span class="number">5</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 2, 9, 2],
       [3, 5, 9, 1],
       [2, 4, 0, 9],
       [9, 8, 1, 1],
       [5, 2, 2, 1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([8, 2, 4])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定随机种子，固定随机结果</span></span><br><span class="line">np.random.seed(<span class="number">100</span>)</span><br><span class="line">array = np.random.rand(<span class="number">10</span>)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([0.54340494, 0.27836939, 0.42451759, 0.84477613, 0.00471886,
       0.12156912, 0.67074908, 0.82585276, 0.13670659, 0.57509333])</code></pre><h3 id="4-6-文件读写"><a href="#4-6-文件读写" class="headerlink" title="4.6 文件读写"></a>4.6 文件读写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Notebook写文件</span></span><br><span class="line"><span class="comment">#%%writefile array.txt</span></span><br><span class="line"><span class="comment">#貌似要写在代码第一行才行？ 此命令前不能加注释！</span></span><br><span class="line">data =  open (<span class="string">'array.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">data.write(<span class="string">"4575\n1234"</span>)</span><br><span class="line">data.close()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python读取数据比较复杂</span></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'array.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        fileds = line.split()</span><br><span class="line">        cur_data = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> fileds]</span><br><span class="line">        data.append(cur_data)</span><br><span class="line">data = np.array(data)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<pre><code>array([[4575.],
       [1234.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Numpy读取数据</span></span><br><span class="line">data = np.loadtxt(<span class="string">"array.txt"</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<pre><code>array([4575., 1234.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%writefile array2.txt</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span></span><br></pre></td></tr></table></figure>

<pre><code>Writing array2.txt</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据中带有分隔符‘，’，读取数据是指明,否则报错</span></span><br><span class="line">data = np.loadtxt(<span class="string">"array2.txt"</span>,delimiter = <span class="string">','</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 2., 3., 4.],
       [5., 6., 7., 8.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%writefile array2.txt</span><br><span class="line">a,b,c,d,e,f</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"><span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span></span><br></pre></td></tr></table></figure>

<pre><code>Overwriting array2.txt</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以指定读取数据时去掉前几行元素</span></span><br><span class="line">data = np.loadtxt(<span class="string">"array2.txt"</span>,delimiter = <span class="string">','</span>,skiprows = <span class="number">1</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1.,  2.,  3.,  4.,  5.,  6.],
       [ 7.,  8.,  9., 10., 11., 12.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看np.loadtxt的功能</span></span><br><span class="line">print(help(np.loadtxt))</span><br></pre></td></tr></table></figure>

<pre><code>Help on function loadtxt in module numpy:

loadtxt(fname, dtype=&lt;class &apos;float&apos;&gt;, comments=&apos;#&apos;, delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=&apos;bytes&apos;, max_rows=None)
    Load data from a text file.

    Each row in the text file must have the same number of values.

    Parameters
    ----------
    fname : file, str, or pathlib.Path
        File, filename, or generator to read.  If the filename extension is
        ``.gz`` or ``.bz2``, the file is first decompressed. Note that
        generators should return byte strings for Python 3k.
    dtype : data-type, optional
        Data-type of the resulting array; default: float.  If this is a
        structured data-type, the resulting array will be 1-dimensional, and
        each row will be interpreted as an element of the array.  In this
        case, the number of columns used must match the number of fields in
        the data-type.
    comments : str or sequence of str, optional
        The characters or list of characters used to indicate the start of a
        comment. None implies no comments. For backwards compatibility, byte
        strings will be decoded as &apos;latin1&apos;. The default is &apos;#&apos;.
    delimiter : str, optional
        The string used to separate values. For backwards compatibility, byte
        strings will be decoded as &apos;latin1&apos;. The default is whitespace.
    converters : dict, optional
        A dictionary mapping column number to a function that will parse the
        column string into the desired value.  E.g., if column 0 is a date
        string: ``converters = {0: datestr2num}``.  Converters can also be
        used to provide a default value for missing data (but see also
        `genfromtxt`): ``converters = {3: lambda s: float(s.strip() or 0)}``.
        Default: None.
    skiprows : int, optional
        Skip the first `skiprows` lines; default: 0.
    usecols : int or sequence, optional
        Which columns to read, with 0 being the first. For example,
        ``usecols = (1,4,5)`` will extract the 2nd, 5th and 6th columns.
        The default, None, results in all columns being read.

        .. versionchanged:: 1.11.0
            When a single column has to be read it is possible to use
            an integer instead of a tuple. E.g ``usecols = 3`` reads the
            fourth column the same way as ``usecols = (3,)`` would.
    unpack : bool, optional
        If True, the returned array is transposed, so that arguments may be
        unpacked using ``x, y, z = loadtxt(...)``.  When used with a structured
        data-type, arrays are returned for each field.  Default is False.
    ndmin : int, optional
        The returned array will have at least `ndmin` dimensions.
        Otherwise mono-dimensional axes will be squeezed.
        Legal values: 0 (default), 1 or 2.

        .. versionadded:: 1.6.0
    encoding : str, optional
        Encoding used to decode the inputfile. Does not apply to input streams.
        The special value &apos;bytes&apos; enables backward compatibility workarounds
        that ensures you receive byte arrays as results if possible and passes
        &apos;latin1&apos; encoded strings to converters. Override this value to receive
        unicode arrays and pass strings as input to converters.  If set to None
        the system default is used. The default value is &apos;bytes&apos;.

        .. versionadded:: 1.14.0
    max_rows : int, optional
        Read `max_rows` lines of content after `skiprows` lines. The default
        is to read all the lines.

        .. versionadded:: 1.16.0

    Returns
    -------
    out : ndarray
        Data read from the text file.

    See Also
    --------
    load, fromstring, fromregex
    genfromtxt : Load data with missing values handled as specified.
    scipy.io.loadmat : reads MATLAB data files

    Notes
    -----
    This function aims to be a fast reader for simply formatted files.  The
    `genfromtxt` function provides more sophisticated handling of, e.g.,
    lines with missing values.

    .. versionadded:: 1.10.0

    The strings produced by the Python float.hex method can be used as
    input for floats.

    Examples
    --------
    &gt;&gt;&gt; from io import StringIO   # StringIO behaves like a file object
    &gt;&gt;&gt; c = StringIO(u&quot;0 1\n2 3&quot;)
    &gt;&gt;&gt; np.loadtxt(c)
    array([[ 0.,  1.],
           [ 2.,  3.]])

    &gt;&gt;&gt; d = StringIO(u&quot;M 21 72\nF 35 58&quot;)
    &gt;&gt;&gt; np.loadtxt(d, dtype={&apos;names&apos;: (&apos;gender&apos;, &apos;age&apos;, &apos;weight&apos;),
    ...                      &apos;formats&apos;: (&apos;S1&apos;, &apos;i4&apos;, &apos;f4&apos;)})
    array([(&apos;M&apos;, 21, 72.0), (&apos;F&apos;, 35, 58.0)],
          dtype=[(&apos;gender&apos;, &apos;|S1&apos;), (&apos;age&apos;, &apos;&lt;i4&apos;), (&apos;weight&apos;, &apos;&lt;f4&apos;)])

    &gt;&gt;&gt; c = StringIO(u&quot;1,0,2\n3,0,4&quot;)
    &gt;&gt;&gt; x, y = np.loadtxt(c, delimiter=&apos;,&apos;, usecols=(0, 2), unpack=True)
    &gt;&gt;&gt; x
    array([ 1.,  3.])
    &gt;&gt;&gt; y
    array([ 2.,  4.])

None</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Numpy写文件操作</span></span><br><span class="line">np.savetxt(<span class="string">"array4.txt"</span>, array, delimiter = <span class="string">','</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将数据文件保存为Numpy数组格式".npy",可以将机器学习训练的模型参数保存为此格式</span></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.save(<span class="string">"array.npy"</span>, array)</span><br><span class="line">np.load(<span class="string">"array.npy"</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3],
       [4, 5, 6]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Numpy</category>
      </categories>
      <tags>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>python包管理工具：Conda和pip比较</title>
    <url>/2020/07/27/pipconda/</url>
    <content><![CDATA[<p>pip是Python Packaging Authority推荐的用于从Python Package Index安装包的工具。pip安装打包为wheels或源代码分发的Python软件。</p>
<p>Conda是跨平台的包和环境管理器，可以安装和管理来自Anaconda repository以 Anaconda Cloud的conda包。 Conda包是二进制文件，徐需要使用编译器来安装它们。另外，conda包不仅限于Python软件。它们还可能包含C或C ++库，R包或任何其他软件。这是conda和pip之间的关键区别。 </p>
<a id="more"></a>
<p>pip安装Python包，而conda安装包可能包含用任何语言编写的软件的包。在使用pip之前，必须通过系统包管理器或下载并运行安装程序来安装Python解释器。而Conda可以直接安装Python包以及Python解释器。</p>
<p>另一个区别是conda能够创建可以包含不同版本的Python或其他软件包的隔离环境。在使用数据科学工具时，这非常有用，因为不同的工具可能包含冲突的要求，这些要求可能会阻止它们全部安装到单个环境中。 </p>
<p>pip和conda在如何实现环境中的依赖关系方面也有所不同。安装包时，pip会在递归的串行循环中安装依赖项。没有努力确保同时满足所有包的依赖性。如果较早安装的软件包与稍后安装的软件包具有不兼容的依赖性版本，则可能导致破坏的环境。conda使用可确保满足环境中安装的所有包的所有要求。此检查可能需要额外的时间，但有助于防止创建破坏的环境，前期关于依赖关系包的元数据是正确的。</p>
<p>考虑到conda和pip之间的相似性，有些人试图将这些工具结合起来创建数据科学环境也就不足为奇了。将pip与conda结合的主要原因是有些包只能通过pip安装。 Anaconda创酷提供超过1,500个软件包，包括最流行的数据科学，机器学习和AI框架。这些，以及包括conda-forge和bioconda在内的数据通过Anaconda云提供的数千个附加软件包，可以使用conda进行安装。尽管有大量的软件包，但与PyPI上提供的150,000多个软件包相比，它仍然很小。有时候需要的包没有conda包，但在PyPI上有，可以用pip安装。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python实现数据结构算法</title>
    <url>/2020/08/03/python%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def binary_search(list, item):</span><br><span class="line">    low &#x3D; 0</span><br><span class="line">    high &#x3D; len(list) - 1</span><br><span class="line">    while(low &lt;&#x3D; high):</span><br><span class="line">        mid &#x3D; (low + high) &#x2F;&#x2F; 2</span><br><span class="line">        guess &#x3D; list[mid]</span><br><span class="line">        if guess &#x3D;&#x3D; item:</span><br><span class="line">            return mid</span><br><span class="line">        elif guess &gt; item:</span><br><span class="line">            high &#x3D; mid - 1</span><br><span class="line">        elif guess &lt; item:</span><br><span class="line">            low &#x3D; mid + 1</span><br><span class="line">    return None</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Hexo框架博客图片不显示的问题</title>
    <url>/2020/07/16/Hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<ol>
<li><p>打开博客所在文件夹blog，找到<code>_config.yml</code>配置文件，修改语句<code>post_asset_folder: true</code></p>
</li>
<li><p>git bash安装插件：<br><code>npm install https://github.com/7ym0n/hexo-asset-image --save</code></p>
</li>
<li><p>每次执行<code>hexo new &quot;文件名&quot;</code>命令时，文件所在文件夹会自动创建一个同名文件夹用于放置资源。</p>
</li>
<li><p>插入图片时用这种方式：<code>{ % raw asset_img test.jpg This is an test image %}</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python面向对象编程和线程进程</title>
    <url>/2020/09/02/python/</url>
    <content><![CDATA[<h2 id="Python3面向对象"><a href="#Python3面向对象" class="headerlink" title="Python3面向对象"></a>Python3面向对象</h2><ul>
<li>类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li>
<li>方法：类中定义的函数。</li>
<li>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li>
<li>数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。</li>
<li>方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li>
<li>局部变量：定义在方法中的变量，只作用于当前实例的类。</li>
<li>实例变量：在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。</li>
<li>继承：即一个派生类继承基类的字段和方法。</li>
<li>实例化：创建一个类的实例，类的具体对象。</li>
<li>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。<a id="more"></a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>网络利器工具</title>
    <url>/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><p>用来快速构建网络链接,常用来调试客户端程序。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>设置数据包传送的时间间隔</td>
</tr>
<tr>
<td>-l</td>
<td>以服务器方式运行，默认为客户端运行</td>
</tr>
<tr>
<td>-k</td>
<td>重复接受并处理某个端口的所有链接</td>
</tr>
<tr>
<td>-p</td>
<td>以客户端运行时强制使用指定端口</td>
</tr>
<tr>
<td>-C</td>
<td>将CR和LF两个字符作为结束符</td>
</tr>
<tr>
<td>-u</td>
<td>使用UDP协议，默认为TCP协议</td>
</tr>
<tr>
<td>-X</td>
<td>nc客户端余代理服务器通信默认为socks5协议</td>
</tr>
<tr>
<td>-z</td>
<td>扫描目标机器某个范围内服务是否开启</td>
</tr>
<tr>
<td><a id="more"></a></td>
<td></td>
</tr>
<tr>
<td>#### 案例：</td>
<td></td>
</tr>
<tr>
<td>执行任务</td>
<td>执行命令</td>
</tr>
<tr>
<td>—-</td>
<td>—-</td>
</tr>
<tr>
<td>扫描机器A端口号在30-40的服务</td>
<td>nc -z A 30-40</td>
</tr>
<tr>
<td>连接服务器A 端口号为5000</td>
<td>nc -C A 5000</td>
</tr>
<tr>
<td>传送文件</td>
<td>MachineA: nc -v -n ip portE: \a.exe</td>
</tr>
</tbody></table>
<h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>实现对网路连通性探测。给地方发送数据包，根据返回的信息初步判断目标机器是否存在或者目标机器操作系统。</p>
<img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ping1.png" class title="This is an test image">
<p>在具体实现中其实使用了ICMP协议，它是一种基于IP协议的控制协议，网际控制协议，其报文格式如下：</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ping2.png" alt="avatar"></p>
<h4 id="字段含义："><a href="#字段含义：" class="headerlink" title="字段含义："></a>字段含义：</h4><ul>
<li>类型：表示ICMP的类型，如果为0表示请求类型，为8表示应答</li>
<li>代码：用来查找产生错误的原因</li>
<li>校验和：检查错误的数据</li>
<li>标识符:使用标识符确认到底是谁发送的控制协议</li>
<li>序列号：唯一确定的一个报文</li>
</ul>
<p>ping命令组装成上述的IP报文进行发送，报文目的地为ping目的地址，原地址为发送ping主机地址，然后按照ICMP的规则填写数据。随后IP报文通过ARP协议，请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址。</p>
<h4 id="ping的详细参数"><a href="#ping的详细参数" class="headerlink" title="ping的详细参数"></a>ping的详细参数</h4><p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ping3.png" alt="avatar"></p>
<h4 id="常用参数："><a href="#常用参数：" class="headerlink" title="常用参数："></a>常用参数：</h4><ul>
<li>[-l] :定义所发送数据包的大小，默认为32字节</li>
<li>[-n] :定义所发数据包的次数，默认为3次</li>
<li>[-t] :表示不间断向目标IP发送数据包</li>
</ul>
<h4 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h4><p>TTL 是 IP 协议包中的一个值，它告诉网络路由器包在网络中的时间是否太长而应被丢弃。</p>
<ul>
<li>TTL设置时间越长，那么缓存时间也就越长，更新也就越不容易生效。增大TTL可以节约域名解析时间从而加快网站的访问。</li>
<li>减小TTL值，减少更换空间时的不可访问时间。</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul>
<li>Request timed out</li>
</ul>
<h4 id="可能出现的情况"><a href="#可能出现的情况" class="headerlink" title="可能出现的情况"></a>可能出现的情况</h4><ul>
<li>对方已经关机或者根本没有这个地址</li>
<li>可能不在同一个网段，即使通过路由也无法找到对方从而出现超时</li>
<li>对方存在但是设置了防火墙过滤</li>
<li>Destination host Unreachable</li>
<li>与对方不在同一个网段且没有设置默认路由</li>
<li>网线出毛病</li>
<li>Bad IP address</li>
<li>要么是IP地址不存在，要么是没有正确连接DNS服务器从而无法解析</li>
</ul>
<h3 id="ifconfig-ipaddr"><a href="#ifconfig-ipaddr" class="headerlink" title="ifconfig/ipaddr"></a>ifconfig/ipaddr</h3><p>查看服务器网卡，IP等信息</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ifconfig1.png" alt="avatar"></p>
<p>上图中被马赛克的位置假设为10.172.100.3，这样就是一个IP地址，凡是都有规则，IP地址按照小数点分割为四部分，每部分占8字节，所以IP地址为32位，那么这样的IP地址一共有多少呢</p>
<p>从而出现IPV6，128位</p>
<p>当时觉得32位很够用了，还将其分为5类，如下图所示</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ifconfig2.png" alt="avatar"></p>
<p>各类地址的主机数量:</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ifconfig3.png" alt="avatar"></p>
<h4 id="无类型域间选路"><a href="#无类型域间选路" class="headerlink" title="无类型域间选路"></a>无类型域间选路</h4><p>CIDR 地址中包含标准的32位IP地址和有关网络前缀位数的信息。比如10.172.100.3/24，IP地址斜杠后面数字24，代表24位是网络号，后面八位为主机号。</p>
<h4 id="计算网络号"><a href="#计算网络号" class="headerlink" title="计算网络号"></a>计算网络号</h4><p>使用IP地址和子网掩码进行AND计算得到网络号。</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ifconfig4.png" alt="avatar"></p>
<h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><p>和它类似的工具在windows中是wireshark，其采用底层库winpcap/libpcap实现。采用了bpf过滤机制。</p>
<p>不同参数的含义:</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/tcpdump1.png" alt="avatar"></p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><table>
<thead>
<tr>
<th>执行任务</th>
<th>执行命令</th>
</tr>
</thead>
<tbody><tr>
<td>捕获特定网口数据包</td>
<td>tcpdump -i eth0</td>
</tr>
<tr>
<td>捕获特定个数(1000)的包</td>
<td>tcpdump -c 1000 -i eth0</td>
</tr>
<tr>
<td>将捕获的包保存到文件</td>
<td>tcpdump -w a.pcap -i eth0</td>
</tr>
<tr>
<td>读取pcap格式的包</td>
<td>tcpdump -r a.pcap</td>
</tr>
<tr>
<td>增加捕获包的时间戳</td>
<td>tcpdump -n -ttt -i eth0</td>
</tr>
<tr>
<td>指定捕获包的协议类型</td>
<td>tcpdump -i eth0 arp</td>
</tr>
<tr>
<td>捕获指定端口</td>
<td>tcpdump -i eth0 post 22</td>
</tr>
<tr>
<td>捕获特定目标ip+port的包</td>
<td>tcpdump -i eth0 dst address and port 22</td>
</tr>
<tr>
<td>捕获DNS请求和响应</td>
<td>tcpdump -i eth0 -s0 port 53</td>
</tr>
<tr>
<td>匹配Http请求头</td>
<td>tcpdump -s 0 -v -n -l</td>
</tr>
<tr>
<td>捕获特定网口数据包</td>
<td>tcpdump -i eth0</td>
</tr>
<tr>
<td>捕获特定个数(1000)的包</td>
<td>tcpdump -c 1000 -i eth0</td>
</tr>
<tr>
<td>将捕获的包保存到文件</td>
<td>tcpdump -w a.pcap -i eth0</td>
</tr>
<tr>
<td>读取pcap格式的包</td>
<td>tcpdump -r a.pcap</td>
</tr>
<tr>
<td>增加捕获包的时间戳</td>
<td>tcpdump -n -ttt -i eth0</td>
</tr>
<tr>
<td>指定捕获包的协议类型</td>
<td>tcpdump -i eth0 arp</td>
</tr>
<tr>
<td>捕获指定端口</td>
<td>tcpdump -i eth0 post 22</td>
</tr>
<tr>
<td>捕获特定目标ip+port的包</td>
<td>tcpdump -i eth0 dst address and port 22</td>
</tr>
<tr>
<td>捕获DNS请求和响应</td>
<td>tcpdump -i eth0 -s0 port 53</td>
</tr>
<tr>
<td>匹配Http请求头</td>
<td>tcpdump -s 0 -v -n -l | egrep -i “POST /|GET /Host:”</td>
</tr>
</tbody></table>
<h3 id="Isof"><a href="#Isof" class="headerlink" title="Isof"></a>Isof</h3><p>列出当前系统打开的文件描述符工具。可以得知感兴趣的描述符是被哪些进程使用</p>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/Isof1.png" alt="avatar"></p>
<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><table>
<thead>
<tr>
<th>执行任务</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>列出所有的网络链接</td>
<td>lsof -i</td>
</tr>
<tr>
<td>列出所有udp的网络链接</td>
<td>lsof -i udp</td>
</tr>
<tr>
<td>列出谁在使用某个端口</td>
<td>lsof -i :3306</td>
</tr>
<tr>
<td>列出谁在使用特定的tcp端口</td>
<td>lsof -i tcp:80</td>
</tr>
<tr>
<td>根据文件描述范围列出文件信息</td>
<td>lsof -d 2-3</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>udp</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>列出谁在使用某个端口</td>
<td>lsof -i :3306</td>
</tr>
<tr>
<td>列出谁在使用特定的tcp端口</td>
<td>lsof -i tcp:80</td>
</tr>
<tr>
<td>根据文件描述范围列出文件信息</td>
<td>lsof -d 2-3</td>
</tr>
</tbody></table>
<h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>netstat是一个网络信息统计工具。它可以得到网卡接口上全部了解，路由表信息，网卡接口信息等。通常在网络编程中我们用它来显示TCP连接以及状态信息。</p>
<h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/netsat1.png" alt></p>
<h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><table>
<thead>
<tr>
<th>执行任务</th>
<th>执行命令</th>
</tr>
</thead>
<tbody><tr>
<td>列出所有连接</td>
<td>netstat -a</td>
</tr>
<tr>
<td>只列出TCP或者UDP</td>
<td>netstat -at/netstat -au</td>
</tr>
<tr>
<td>列出监听中的连接</td>
<td>netstat -tnl</td>
</tr>
<tr>
<td>获取进程名、进程号以及用户 ID</td>
<td>nestat  -nlpt</td>
</tr>
<tr>
<td>打印统计信息</td>
<td>netstat -s</td>
</tr>
<tr>
<td>netstat持续输出</td>
<td>netstat -ct</td>
</tr>
<tr>
<td>打印active状态的连接</td>
<td>netstat -atnp</td>
</tr>
<tr>
<td>查看服务是否运行(npt)</td>
<td>netstat -aple</td>
</tr>
</tbody></table>
<h3 id="dpkt"><a href="#dpkt" class="headerlink" title="dpkt"></a>dpkt</h3><p>dpkt定义包packet类，它定义了网络报文类型的基础类。其中IP，ICMP等继承于dpkt class，每一个子类有一个_ hdr_ 结构，此结构定义了不同报文的头部，方便取出相应的控制字段。示例如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">import dpkt</span><br><span class="line">import socket</span><br><span class="line">import optparse</span><br><span class="line"></span><br><span class="line">def printPcap(pcap):</span><br><span class="line">    <span class="comment"># 遍历[timestamp, packet]记录的数组</span></span><br><span class="line">    <span class="keyword">for</span> (ts, buf) <span class="keyword">in</span> pcap:</span><br><span class="line">        try:</span><br><span class="line">            <span class="comment"># 获取以太网部分数据</span></span><br><span class="line">            eth = dpkt.ethernet.Ethernet(buf)</span><br><span class="line">            <span class="comment"># 获取IP层数据</span></span><br><span class="line">            ip = eth.data</span><br><span class="line">            <span class="comment"># 把存储在inet_ntoa中的IP地址转换成一个字符串</span></span><br><span class="line">            src = socket.inet_ntoa(ip.src)</span><br><span class="line">            dst = socket.inet_ntoa(ip.dst)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">'[+] 源地址: '</span> + src + <span class="string">' --&gt; 目标地址: '</span> + dst</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = optparse.OptionParser(<span class="string">'[*] Usage : ./pcapTest.py -f &lt;file&gt;'</span>)<span class="comment">#测试包</span></span><br><span class="line">    parser.add_option(<span class="string">'-f'</span>,dest=<span class="string">'fileName'</span>,<span class="built_in">type</span>=<span class="string">'string'</span>,<span class="built_in">help</span>=<span class="string">'specify target filename'</span>)</span><br><span class="line">    (options,args) = parser.parse_args()</span><br><span class="line">    fileName = options.fileName<span class="comment"># 取得包名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> fileName == None:</span><br><span class="line">        <span class="built_in">print</span> parser.usage</span><br><span class="line">        <span class="built_in">exit</span>(0)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#f = open('geotest.pcap')</span></span><br><span class="line">        f = open(fileName)</span><br><span class="line">        pcap = dpkt.pcap.Reader(f)</span><br><span class="line">        printPcap(pcap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="scapy"><a href="#scapy" class="headerlink" title="scapy"></a>scapy</h3><p>“强大的交互式包操作工具”、“支持大量协议的包解析和包构造”、“轻松取代 hping，85% 的 nmap，arpspoof，tcpdump 等等”。不过归根到底，它说的强大功能，都是基于 Scapy 是一个强大的网络数据包操作工具才能实现得了的。只是大概介绍，具体用法官网非常详细，有助于学习网络协议</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/scapy.png" alt></p>
]]></content>
      <categories>
        <category>网络工具</category>
      </categories>
      <tags>
        <tag>网络工具</tag>
      </tags>
  </entry>
  <entry>
    <title>使用终端操作mysql数据库</title>
    <url>/2020/11/29/%E6%95%B0%E6%8D%AE%E5%BA%931/</url>
    <content><![CDATA[<ol>
<li><p>如何查看有什么数据库？<br><code>show databases;</code></p>
</li>
<li><p>如何选择数据库？<br><code>use databaseName;</code></p>
</li>
<li><p>查看数据库中有哪些表？<br> <code>show tables;</code></p>
</li>
<li><p>如何查询表中的数据？<br> <code>select * from tableName;</code></p>
</li>
<li><p>如何退出数据库服务器？<br><code>exit;</code></p>
</li>
<li><p>在数据库服务器中创建自己的数据库<br><code>create database databaseName;</code></p>
<a id="more"></a></li>
<li><p>如何创建一个名为pet的数据表？<br><code>create TABLE pet(name VARCHAR(20), owner VARCHAR(20), specise VARCHAR(20), gender CHAR(1), birth DATE, death DATE);</code><br> 注意事项:</p>
<pre><code>1:var()与varchar()的区别在于var()是定常的,哪怕存储的字符串没有达到&quot;()&quot;中数字的上限,var()依然会占用空格来填充空间.而varchar()则是不定长的,没有达到&quot;()&quot;中的上限则会自动去掉后面的空格;
2:性别不要用:sex 要用:gender  一个是性 一个是性别;
3:定义最后一个字段的时候不要加&quot;,&quot;;
4:上面的&quot;VAR&quot;,&quot;VARCHAR&quot;,&quot;DATE&quot;可以用小写.不过最好用大写来表示区分关键字,若不然也许写到后面你自己都不知道这个词是数据库中的关键字还是你自己自定义的一些数据,同时一定要用英文的标点符号也必须半角输入.</code></pre></li>
<li><p>查看数据表的架构</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe tableName;</span><br><span class="line">说明:</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">Field    :    字段的名称</span><br><span class="line">Type     :    字段的类型,可以有int    var    varchar    </span><br><span class="line">Key      :    是否是关键字 如可以定义为:  primary key 或者 unique key   ...</span><br><span class="line">Default: :    若是该字段没有主动设置值的时候,该字段的默认值是什么?</span><br></pre></td></tr></table></figure></li>
<li><p>如何插入数据？</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO pet VALUES(&#39;kk&#39;,&#39;cc&#39;,&#39;dog&#39;,&#39;1&#39;,&#39;1998-8-2&#39;,null)</span><br><span class="line">+------+-------+---------+------+------------+-------+</span><br><span class="line">| name | owner | specise | sex  | brith      | death |</span><br><span class="line">+------+-------+---------+------+------------+-------+</span><br><span class="line">| kk   | cc    | dog     | 1    | 1998-08-02 | NULL  |</span><br><span class="line">+------+-------+---------+------+------------+-------+</span><br></pre></td></tr></table></figure>
<p> 注意:<br> NULL:代表的是空,表示该字段还没有数据.千万不要主动填写’NULL’,这代表你的字段有一个值叫做’null’.</p>
<p> 插入数据的另一种写法:<br><code>INSERT INTO pet(name,owner) VALUES (&#39;xx&#39;,&#39;cc&#39;);</code><br>代表我只在name和owner字段上面插入的一条,其他皆为NULL/默认值的数据。</p>
</li>
<li><p>mysql常用数据类型</p>
<ul>
<li>MySQL常见的数据类型有: 日期类型, 数值类型 字符串类型<br>日期类型：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">MySQL数据类型</th>
<th align="center">字节数</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">date</td>
<td align="center">3字节</td>
<td align="center">日期，格式：2014-09-18</td>
</tr>
<tr>
<td align="center">time</td>
<td align="center">3字节</td>
<td align="center">时间，格式：08:42:30</td>
</tr>
<tr>
<td align="center">datetime</td>
<td align="center">8字节</td>
<td align="center">日期时间，格式：2014-09-18 08:42:30</td>
</tr>
<tr>
<td align="center">timestamp</td>
<td align="center">4字节</td>
<td align="center">自动存储记录修改的时间</td>
</tr>
<tr>
<td align="center">year</td>
<td align="center">1字节</td>
<td align="center">年份</td>
</tr>
</tbody></table>
</li>
</ol>
<p>注意:在MySQL中，日期时间值使用单引号引起来。 相当于Java中Date，Calender。</p>
<p>数值类型:</p>
<ol>
<li><p>整形</p>
<table>
<thead>
<tr>
<th align="center">MySQL数据类型</th>
<th align="center">字节数</th>
<th align="center">含义(带有符号)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">tinyint</td>
<td align="center">1字节</td>
<td align="center">范围（-128~127）</td>
</tr>
<tr>
<td align="center">smallint</td>
<td align="center">2字节</td>
<td align="center">范围（-32768~32767）</td>
</tr>
<tr>
<td align="center">mediumint</td>
<td align="center">3字</td>
<td align="center">范围（-8388608~8388607）</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">4字节</td>
<td align="center">范围（-2147483648~2147483647）</td>
</tr>
<tr>
<td align="center">bigint</td>
<td align="center">8字节</td>
<td align="center">范围（+-9.22*10的18次方）</td>
</tr>
</tbody></table>
</li>
<li><p>浮点型</p>
<table>
<thead>
<tr>
<th align="center">MySQL数据类型</th>
<th align="center">字节数</th>
<th align="center">含义(带有符号)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float(m, d)</td>
<td align="center">4字节</td>
<td align="center">单精度浮点型，m总个数，d小数位</td>
</tr>
<tr>
<td align="center">double(m, d)</td>
<td align="center">8字节</td>
<td align="center">双精度浮点型，m总个数，d小数位</td>
</tr>
<tr>
<td align="center">decimal(m, d)</td>
<td align="center"></td>
<td align="center">decimal是存储为字符串的浮点数</td>
</tr>
</tbody></table>
</li>
<li><p>字符类型</p>
<table>
<thead>
<tr>
<th align="center">MySQL数据类型</th>
<th align="center">含义(带有符号)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">char(n)</td>
<td align="center">固定长度，最多255个字符</td>
</tr>
<tr>
<td align="center">varchar(n)</td>
<td align="center">可变长度，最多65535个字符</td>
</tr>
<tr>
<td align="center">tinytext</td>
<td align="center">可变长度，最多255个字符</td>
</tr>
<tr>
<td align="center">text</td>
<td align="center">可变长度，最多65535个字符</td>
</tr>
<tr>
<td align="center">mediumtext</td>
<td align="center">可变长度，最多2的24次方-1个字符</td>
</tr>
<tr>
<td align="center">longtext</td>
<td align="center">可变长度，最多2的32次方-1个字符</td>
</tr>
</tbody></table>
</li>
<li><p>删改数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">插入数据：</span><br><span class="line">   INSERT INTO pet VALUES(&#39;kk1&#39;,&#39;cc1&#39;,&#39;dog1&#39;,&#39;1&#39;,&#39;1998-1-2&#39;,null);</span><br><span class="line">   INSERT INTO pet VALUES(&#39;kk2&#39;,&#39;cc2&#39;,&#39;dog2&#39;,&#39;2&#39;,&#39;1998-2-2&#39;,null);</span><br><span class="line">   INSERT INTO pet VALUES(&#39;kk3&#39;,&#39;cc3&#39;,&#39;dog3&#39;,&#39;1&#39;,&#39;1998-3-2&#39;,&#39;1998-12-2&#39;);</span><br><span class="line">   INSERT INTO pet VALUES(&#39;kk4&#39;,&#39;cc4&#39;,&#39;dog4&#39;,&#39;2&#39;,&#39;1998-4-2&#39;,null);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除语句：</span><br><span class="line">DELETE FROM tableName WHERE 条件;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改数据：</span><br><span class="line">UPDATE tableName SET 字段1&#x3D;值1，字段2&#x3D;值2... WHERE 条件;</span><br></pre></td></tr></table></figure></li>
<li><p>mysql建表中的约束</p>
<ol>
<li><strong>主键约束</strong>：它能够唯一确定一张表中的一条记录,增加主键约束之后,就可以使得字段不重复而且不为空。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE table user(id INT PRIMARY KEY,name VARCHAR(20));</span><br><span class="line">INSERT INTO user VALUES(1,&#39;张三&#39;);</span><br><span class="line"></span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | 张三 |</span><br><span class="line">+----+------+</span><br><span class="line"></span><br><span class="line">运行DESCRIBE user;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">发现 id是不可以为null 而且 key的值也变为:PRI(primary)</span><br></pre></td></tr></table></figure></li>
<li><strong>复合主键</strong>：只要所有的字段都不是相同的情况下可以允许其中的字段重复。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user2(id INT,name VARCHAR(20),password VARCHAR(20),PRIMARY key(id,name));</span><br><span class="line"></span><br><span class="line">    运行DESCRIBE user2;</span><br><span class="line">    +----------+-------------+------+-----+---------+-------+</span><br><span class="line">    | Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">    +----------+-------------+------+-----+---------+-------+</span><br><span class="line">    | id       | int(11)     | NO   | PRI | NULL    |       |</span><br><span class="line">    | name     | varchar(20) | NO   | PRI | NULL    |       |</span><br><span class="line">    | password | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">    +----------+-------------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line">    INSERT INTO user2 VALUES (1,&#39;老王&#39;,&#39;123456&#39;);</span><br><span class="line">    INSERT INTO user2 VALUES (2,&#39;老王&#39;,&#39;123456&#39;);</span><br><span class="line"></span><br><span class="line">    +----+------+----------+</span><br><span class="line">    | id | name | password |</span><br><span class="line">    +----+------+----------+</span><br><span class="line">    |  1 | 老王 | 123456   |</span><br><span class="line">    |  2 | 老王 | 123456   |</span><br><span class="line">    +----+------+----------+</span><br><span class="line"></span><br><span class="line">    INSERT INTO user2 VALUES (1,&#39;老李&#39;,&#39;123456&#39;);</span><br><span class="line"></span><br><span class="line">    SELECT * FROM user2;</span><br><span class="line">    +----+------+----------+</span><br><span class="line">    | id | name | password |</span><br><span class="line">    +----+------+----------+</span><br><span class="line">    |  1 | 老李 | 123456   |</span><br><span class="line">    |  1 | 老王 | 123456   |</span><br><span class="line">    |  2 | 老王 | 123456   |</span><br><span class="line">    +----+------+----------+</span><br></pre></td></tr></table></figure></li>
<li><strong>自增约束</strong>： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    CREATE TABLE user3(id INT PRIMARY KEY AUTO_INCREMENT,name VARCHAR(20));</span><br><span class="line"></span><br><span class="line">运行DESCRIBE user3;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line"></span><br><span class="line">INSERT INTO user3(name) VALUES(&#39;张三&#39;);</span><br><span class="line">INSERT INTO user3(name) VALUES(&#39;李四&#39;);</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | 张三 |</span><br><span class="line">|  2 | 李四 |</span><br><span class="line">+----+------+</span><br><span class="line">没有自定义id值 但是自动生成了id。</span><br></pre></td></tr></table></figure></li>
<li><strong>唯一约束</strong>： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user5(id INT PRIMARY KEY AUTO_INCREMENT,name VARCHAR(20));</span><br><span class="line">运行 DESCRIBE user5;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line"></span><br><span class="line">新增name为唯一约束:</span><br><span class="line">ALTER TABLE user5 ADD UNIQUE(name);</span><br><span class="line">运行 DESCRIBE user5;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(20) | YES  | UNI | NULL    |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">测试:插入数据</span><br><span class="line">INSERT INTO user5(name) VALUES (&#39;cc&#39;);</span><br><span class="line">运行 SELECT * FROM user5; 查看结果:</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | cc   |</span><br><span class="line">+----+------+</span><br><span class="line">再次插入INSERT INTO user5(name) VALUES (&#39;cc&#39;);</span><br><span class="line">出现:ERROR 1062 (23000): Duplicate entry &#39;cc&#39; for key &#39;name&#39;</span><br><span class="line"></span><br><span class="line">换个试试 INSERT INTO user5(name) VALUES (&#39;aa&#39;);</span><br><span class="line">运行 SELECT * FROM user5; 查看结果:</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  3 | aa   |</span><br><span class="line">|  1 | cc   |</span><br><span class="line">+----+------+</span><br><span class="line">总结一下:</span><br><span class="line">    主键约束(primary key)中包含了唯一约束</span><br><span class="line">场景:业务需求:设计一张用户注册表,用户姓名必须要用手机号来注册,而且手机号和用户名称都不能为空,那么:</span><br><span class="line">CREATE TABLE user_test(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT COMMENT&#39;主键id&#39;,</span><br><span class="line">    name VARCHAR(20) NOT NULL COMMENT&#39;用户姓名,不能为空&#39;,</span><br><span class="line">    phone_number VARCHAR(20) UNIQUE NOT NULL COMMENT&#39;用户手机,不能重复且不能为空&#39;</span><br><span class="line">);</span><br><span class="line">运行 DESCRIBE user_test;</span><br><span class="line">+--------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field        | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+--------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id           | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name         | varchar(20) | NO   |     | NULL    |                |</span><br><span class="line">| phone_number | int(11)     | NO   | UNI | NULL    |                |</span><br><span class="line">+--------------+-------------+------+-----+---------+----------------+</span><br><span class="line">这样的话就达到了每一个手机号都只能出现一次,达到了每个手机号只能被注册一次.</span><br><span class="line">用户姓名可以重复,但是手机号码却不能重复,复合正常的逻辑需求。</span><br></pre></td></tr></table></figure></li>
<li><strong>非空约束</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name和phone_number都设置了非空,先只设置name参数不设置phone_number参数试一试</span><br><span class="line">INSERT INTO user_test (name) VALUES (&#39;张三&#39;);</span><br><span class="line">会出现Field &#39;phone_number&#39; doesn&#39;t have a default value</span><br><span class="line"></span><br><span class="line">两个非空参数一起设置:</span><br><span class="line">INSERT INTO user_test (name,phone_number) VALUES (&#39;张三&#39;,&#39;12345678901&#39;);</span><br><span class="line">+----+------+--------------+</span><br><span class="line">| id | name | phone_number |</span><br><span class="line">+----+------+--------------+</span><br><span class="line">|  1 | 张三 | 12345678901  |</span><br><span class="line">+----+------+--------------+</span><br></pre></td></tr></table></figure></li>
<li><strong>默认约束</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user6(</span><br><span class="line">id int PRIMARY KEY AUTO_INCREMENT COMMENT&#39;主键id&#39;,</span><br><span class="line">name VARCHAR(20) NOT NULL COMMENT&#39;用户姓名不能为空&#39;,</span><br><span class="line">phone_number VARCHAR(20) NOT NULL COMMENT&#39;用户手机号,不能为空&#39;,</span><br><span class="line">status INT DEFAULT 0 COMMENT&#39;用户状态0:启用 1:禁封 默认:0&#39;);</span><br><span class="line">运行DESCRIBE user6;</span><br><span class="line">+--------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field        | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+--------------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id           | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name         | varchar(20) | NO   |     | NULL    |                |</span><br><span class="line">| phone_number | varchar(20) | NO   |     | NULL    |                |</span><br><span class="line">| status       | int(11)     | YES  |     | 0       |                |</span><br><span class="line">+--------------+-------------+------+-----+---------+----------------+</span><br><span class="line">插入数据:</span><br><span class="line">INSERT INTO user6(name,phone_number) VALUES (&#39;aa&#39;,&#39;123&#39;);</span><br><span class="line">INSERT INTO user6(name,phone_number) VALUES(&#39;bb&#39;,&#39;1234&#39;);</span><br><span class="line">INSERT INTO user6(name,phone_number) VALUES(&#39;cc&#39;,&#39;1263456&#39;);</span><br><span class="line"></span><br><span class="line">查看数据:SELECT * FROM user6;</span><br><span class="line">+----+------+--------------+--------+</span><br><span class="line">| id | name | phone_number | status |</span><br><span class="line">+----+------+--------------+--------+</span><br><span class="line">|  1 | aa   | 123          |      0 |</span><br><span class="line">|  2 | bb   | 1234         |      0 |</span><br><span class="line">|  3 | cc   | 1263456      |      0 |</span><br><span class="line">+----+------+--------------+--------+</span><br><span class="line">我们没有设置status的值,但是给我们创建了默认值 0。</span><br></pre></td></tr></table></figure></li>
<li><strong>外键约束</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    CREATE TABLE classes(</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT COMMENT&#39;班级表id&#39;,</span><br><span class="line">    name VARCHAR(20) COMMENT&#39;班级名称&#39;</span><br><span class="line">);</span><br><span class="line">运行DESCRIBE classes;</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line"></span><br><span class="line">CREATE TABLE student(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT COMMENT&#39;学生表id&#39;,</span><br><span class="line">name VARCHAR(20) COMMENT&#39;学生姓名&#39;,</span><br><span class="line">    class_id int COMMENT&#39;教室id,这张表中的class_id是classes表中id的值&#39;,</span><br><span class="line">    FOREIGN KEY (class_id) REFERENCES classes(id)</span><br><span class="line">);</span><br><span class="line">&#x2F;&#x2F;FOREIGN :外来  REFERENCES:应用,参考</span><br><span class="line">运行DESCRIBE student;</span><br><span class="line">+----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+----------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id       | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name     | varchar(20) | YES  |     | NULL    |                |</span><br><span class="line">| class_id | int(11)     | YES  | MUL | NULL    |                |</span><br><span class="line">+----------+-------------+------+-----+---------+----------------+</span><br><span class="line"></span><br><span class="line">班级插入数据:</span><br><span class="line">INSERT INTO CLASSES (name) VALUES (&#39;一班&#39;);</span><br><span class="line">INSERT INTO CLASSES (name) VALUES (&#39;二班&#39;);</span><br><span class="line">INSERT INTO CLASSES (name) VALUES (&#39;三班&#39;);</span><br><span class="line">INSERT INTO CLASSES (name) VALUES (&#39;四班&#39;);</span><br><span class="line">查看数据 SELECT * FROM classes;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | 一班 |</span><br><span class="line">|  2 | 二班 |</span><br><span class="line">|  3 | 三班 |</span><br><span class="line">|  4 | 四班 |</span><br><span class="line">+----+------+</span><br><span class="line"></span><br><span class="line">学生插入数据:</span><br><span class="line">INSERT INTO student (name,class_id) VALUES (&#39;小赵&#39;,1);</span><br><span class="line">INSERT INTO student (name,class_id) VALUES (&#39;小钱&#39;,2);</span><br><span class="line">INSERT INTO student (name,class_id) VALUES (&#39;小孙&#39;,3);</span><br><span class="line">INSERT INTO student (name,class_id) VALUES (&#39;小李&#39;,4);</span><br><span class="line">查看数据 SELECT * FROM student;</span><br><span class="line">+----+------+----------+</span><br><span class="line">| id | name | class_id |</span><br><span class="line">+----+------+----------+</span><br><span class="line">|  1 | 小赵 |        1 |</span><br><span class="line">|  2 | 小钱 |        2 |</span><br><span class="line">|  3 | 小孙 |        3 |</span><br><span class="line">|  4 | 小李 |        4 |</span><br><span class="line">+----+------+----------+</span><br><span class="line">若是像插入班级为5的数据 如:</span><br><span class="line">INSERT INTO student (name,class_id) VALUES (&#39;小周&#39;,5);</span><br><span class="line">报错: Cannot add or update a child row</span><br><span class="line"></span><br><span class="line">我们删除正在被学生表引用的&#39;四班&#39;试试:</span><br><span class="line">DELETE classes WHERE name &#x3D; &#39;四班&#39;;</span><br><span class="line">出现:Cannot delete or update a parent row:不能删除主表中的行。</span><br><span class="line">我们先删除学生表中的 &#39;小李&#39;从而解除班级中&#39;四班&#39;的外键约束,再来删除&#39;四班&#39;(因为小李引用了四班)</span><br><span class="line">DELETE FROM student WHERE name &#x3D; &#39;小李&#39;;</span><br><span class="line">再次删除classes表中的&#39;四班&#39;;</span><br><span class="line">DELETE FROM classes WHERE name &#x3D; &#39;四班&#39;;</span><br><span class="line">最后: SELECT * FROM classes;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | 一班 |</span><br><span class="line">|  2 | 二班 |</span><br><span class="line">|  3 | 三班 |</span><br><span class="line">+----+------+</span><br><span class="line">&#39;四班&#39;被成功删除!</span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line">1.主表中没有的数据,在附表中,是不可以使用的.</span><br><span class="line">2.主表中记录的数据现在正在被附表所引用,那么主表中正在被引用的数据不可以被删除</span><br><span class="line">3.若要想删除,先将附表中的数据删除在删除主表数据</span><br><span class="line">4.对于外键约束大家可以联想 省,市 来进行联想 (市必须要依赖于省,只要省还有一个市在引用,那么就不可以删除省,要不然市就没有省了. 那么我们想删除省,必须要将该省下所有的市全部删除之后,才可以删除这个省)</span><br></pre></td></tr></table></figure></li>
<li><strong>建表之后添加主键约束</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE user4(</span><br><span class="line">id INT,</span><br><span class="line">name VARCHAR(20));</span><br><span class="line">运行DESCRIBE user4;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line">加入主键约束:</span><br><span class="line">ALTER TABLE user4 add PRIMARY KEY(id);</span><br><span class="line">再次运行DESCRIBE user4;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line">删除主键约束:</span><br><span class="line">ALERT TABLE user4 DROP PRIMARY KEY;</span><br><span class="line">运行DESCRIBE user4查看表结构:</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | NO   |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line">使用 modify 修改字段,添加约束:</span><br><span class="line">ALTER TABLE user4 MODIFY id INT PRIMARY key;</span><br><span class="line">使用DESCRIBE user4 查看表结构:</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line"></span><br><span class="line">给主键设置自增长:</span><br><span class="line">ALTER TABLE user4 MODIFY id INT AUTO_INCREMENT;</span><br><span class="line">运行 DESCRIBE user4 查看表结构:</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br><span class="line">| id    | int(11)     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |                |</span><br><span class="line">+-------+-------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络面试知识点总结</title>
    <url>/2020/08/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="一-OSI与TCP-IP各层的结构、功能与协议"><a href="#一-OSI与TCP-IP各层的结构、功能与协议" class="headerlink" title="一 OSI与TCP/IP各层的结构、功能与协议"></a>一 OSI与TCP/IP各层的结构、功能与协议</h1><h2 id="五层协议的体系结构"><a href="#五层协议的体系结构" class="headerlink" title="五层协议的体系结构"></a>五层协议的体系结构</h2><p>中和了OSI的七层结构和TCP/IP的四层结构。</p>
<p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb25bueipj30hl09kmxl.jpg" alt="undefined"></p>
<a id="more"></a>
<h3 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1 应用层"></a>1 应用层</h3><p>功能：通过应用进程间的交互来完成特定网络应用。<br>应用层协议定义的是应用进程（<strong>进程：主机中正在运行的程序</strong>）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议，在互联网中应用层协议很多，如域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等。应用层交互的数据单元称为<strong>报文</strong>。</p>
<h4 id="域名系统（Domain-Name-System，DNS）"><a href="#域名系统（Domain-Name-System，DNS）" class="headerlink" title="域名系统（Domain Name System，DNS）"></a>域名系统（Domain Name System，DNS）</h4><p>将<strong>域名和IP地址相互映射</strong>的一个分布式数据库。</p>
<h4 id="超文本传输协议（HTTP，HyperText-Transfer-Protocol"><a href="#超文本传输协议（HTTP，HyperText-Transfer-Protocol" class="headerlink" title="超文本传输协议（HTTP，HyperText Transfer Protocol)"></a>超文本传输协议（HTTP，HyperText Transfer Protocol)</h4><p>互联网上应用最为广泛的一种网络协议。所有的 WWW（万维网） 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。</p>
<h3 id="2-运输层"><a href="#2-运输层" class="headerlink" title="2 运输层"></a>2 运输层</h3><h4 id="两种协议"><a href="#两种协议" class="headerlink" title="两种协议"></a>两种协议</h4><ol>
<li>传输控制协议 （TCP, Transmisson Control Protocol）–提供面向连接的，可靠的数据传输服务。</li>
<li>用户数据协议 UDP（User Datagram Protocol）–提供无连接的，尽最大努力的数据传输服务（不保证数据传输的可靠性）。</li>
</ol>
<h4 id="UDP的主要特点"><a href="#UDP的主要特点" class="headerlink" title="UDP的主要特点"></a>UDP的主要特点</h4><ol>
<li>面向无连接；</li>
<li>尽最大努力交付，不保证可靠交付，主机不需保持复杂链接状态；</li>
<li>面向报文；</li>
<li>没有拥塞控制，出现拥塞情况时发送速率不会降低（实时应用如直播，视频会议）；</li>
<li>支持一对一、一对多、多对多、多对一的交互通信；</li>
<li>首部开销小，8个字节，TCP首部20个字节。</li>
</ol>
<h4 id="TCP的主要特点"><a href="#TCP的主要特点" class="headerlink" title="TCP的主要特点"></a>TCP的主要特点</h4><ol>
<li>面向连接（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；</li>
<li>每一条 TCP 连接只能有两个端点，只能是点对点（一对一）；</li>
<li>TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；</li>
<li>TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；</li>
<li>面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。</li>
</ol>
<h3 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3 网络层"></a>3 网络层</h3><p>网络层负责为分组交换网上的不同主机提供通信服务。 在发送数据时，<strong>网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送</strong>。在 TCP/IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报 ，简称数据报。</p>
<p>网络层的另一个任务就是选择合适的路由，使源主机运输层所传下来的分株，能通过网络层中的路由器找到目的主机。</p>
<p>互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Intert Prococol）和许多路由选择协议，因此互联网的网络层也叫做网际层或IP层。</p>
<h3 id="4-数据链路层"><a href="#4-数据链路层" class="headerlink" title="4 数据链路层"></a>4 数据链路层</h3><p>数据链路层。两台主机之间数据传输的链路上的协议。 在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 <strong>IP 数据报组装程帧</strong>，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。<br>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。<br>控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。</p>
<h3 id="5-物理层"><a href="#5-物理层" class="headerlink" title="5 物理层"></a>5 物理层</h3><p>传送数据单位是比特。<br>物理层的作用是<strong>实现相邻计算机节点之间比特流的透明传送</strong>，尽可能屏蔽掉具体传输介质和物理设备的差异。 使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p>
<p>在互联网使用的各种协议中最重要和最著名的就是 TCP/IP 两个协议。现在经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。</p>
<p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb3m8azlbg30v41830yk.gif" alt="undefined"></p>
<h1 id="二-TCP-三次握手和四次挥手"><a href="#二-TCP-三次握手和四次挥手" class="headerlink" title="二 TCP 三次握手和四次挥手"></a>二 TCP 三次握手和四次挥手</h1><p>为了准确无误地把数据送达目标处，TCP协议采用了三次握手。</p>
<p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb4euupowj30o00c7mxg.jpg" alt="undefined"></p>
<ul>
<li>客户端–发送带有 SYN 标志的数据包–一次握手–服务端</li>
<li>服务端–发送带有 SYN/ACK 标志的数据包–二次握手–客户端</li>
<li>客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端</li>
</ul>
<h2 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h2><p>三次握手的目的是建立可靠的通信信道，双方确认自己与对方的发送与接收是正常的。<br>第一次握手：Client 什么都不能确认；Server 确认了对方发送正常<br>第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己接收正常，对方发送正常<br>第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送接收正常<br>所以三次握手就能确认双发收发功能都正常，缺一不可。</p>
<h2 id="为什么要传回-SYN"><a href="#为什么要传回-SYN" class="headerlink" title="为什么要传回 SYN"></a>为什么要传回 SYN</h2><p>接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。</p>
<h2 id="传了-SYN-为啥还要传-ACK"><a href="#传了-SYN-为啥还要传-ACK" class="headerlink" title="传了 SYN,为啥还要传 ACK"></a>传了 SYN,为啥还要传 ACK</h2><p>双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号来进行验证。</p>
<blockquote>
<p>SYN 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误。]）消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。</p>
</blockquote>
<h2 id="断开-TCP-连接需要“四次挥手”"><a href="#断开-TCP-连接需要“四次挥手”" class="headerlink" title="断开 TCP 连接需要“四次挥手”"></a>断开 TCP 连接需要“四次挥手”</h2><p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb4tkp2v6j30dw09g3ye.jpg" alt="undefined"></p>
<ul>
<li>客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送</li>
<li>服务器-收到这个 FIN，它发回一个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号</li>
<li>服务器-关闭与客户端的连接，发送一个FIN给客户端</li>
<li>客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1</li>
</ul>
<h3 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手"></a>为什么要四次挥手</h3><p>任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入<strong>半关闭状态</strong>。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。<br>举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。</p>
<h1 id="三-TCP、UDP-协议的区别"><a href="#三-TCP、UDP-协议的区别" class="headerlink" title="三 TCP、UDP 协议的区别"></a>三 TCP、UDP 协议的区别</h1><p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb4yheti2j30nw064aa1.jpg" alt="undefined"></p>
<p>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等<br>TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。 TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的运输服务（TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这一难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。TCP 一般用于文件传输、发送和接收邮件、远程登录等场景。</p>
<h1 id="四-TCP-协议如何保证可靠传输"><a href="#四-TCP-协议如何保证可靠传输" class="headerlink" title="四 TCP 协议如何保证可靠传输"></a>四 TCP 协议如何保证可靠传输</h1><ol>
<li>应用数据被分割成 TCP 认为最适合发送的数据块。</li>
<li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。</li>
<li><strong>校验和</strong>： TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。</li>
<li>TCP 的接收端会丢弃重复的数据。</li>
<li><strong>流量控制</strong>： TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （<strong>TCP 利用滑动窗口实现流量控制</strong>）</li>
<li><strong>拥塞控制</strong>： 当网络拥塞时，减少数据的发送。</li>
<li><strong>停止等待协议</strong>: 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li>
<li><strong>超时重传</strong>： 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li>
</ol>
<h2 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h2><ul>
<li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；</li>
<li>在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；</li>
</ul>
<h3 id="1-无差错情况"><a href="#1-无差错情况" class="headerlink" title="1) 无差错情况"></a>1) 无差错情况</h3><p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb8qpnmwtj30ea0d5dft.jpg" alt="undefined"></p>
<p>发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。</p>
<h3 id="2-出现差错情况（超时重传）"><a href="#2-出现差错情况（超时重传）" class="headerlink" title="2) 出现差错情况（超时重传）:"></a>2) 出现差错情况（超时重传）:</h3><p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb8rkehhmj30qh0dcq37.jpg" alt="undefined"></p>
<p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求 ARQ 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。连续 ARQ 协议 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p>
<h3 id="3-确认丢失和确认迟到"><a href="#3-确认丢失和确认迟到" class="headerlink" title="3) 确认丢失和确认迟到"></a>3) 确认丢失和确认迟到</h3><ul>
<li><strong>确认丢失</strong>：确认消息在传输过程丢失</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb8ujp3tbj30pi0ct3ys.jpg" alt="undefined"></p>
<ol>
<li>丢弃这个重复的M1消息，不向上层交付。</li>
<li>向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li>
</ol>
<ul>
<li><strong>确认迟到</strong> ：确认消息在传输过程中迟到</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb8x0vymuj30oz0cigly.jpg" alt="undefined"></p>
<p>A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：</p>
<ol>
<li>A收到重复的确认后，直接丢弃。</li>
<li>B收到重复的M1后，也直接丢弃重复的M1。</li>
</ol>
<h2 id="自动重传请求-ARQ-协议"><a href="#自动重传请求-ARQ-协议" class="headerlink" title="自动重传请求 ARQ 协议"></a>自动重传请求 ARQ 协议</h2><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。</p>
<p>优点： 简单<br>缺点： 信道利用率低</p>
<h2 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h2><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p>
<p>优点： 信道利用率高，容易实现，即使确认丢失，也不必重传。<br>缺点： 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。</p>
<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><ul>
<li>TCP 利用滑动窗口实现流量控制的机制。</li>
<li>滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。</li>
<li>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。</li>
</ul>
<h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><ul>
<li>TCP 利用滑动窗口实现流量控制。</li>
<li>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</li>
<li>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</li>
</ul>
<h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><p>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。<br>为了进行拥塞控制，TCP 发送方要维持一个 拥塞窗口(cwnd) 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。<br>TCP的拥塞控制采用了四种算法，即 慢开始 、 拥塞避免 、快重传 和 快恢复。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</p>
<ul>
<li>慢开始： 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb95g7r02j30t60fkmz6.jpg" alt="undefined"></p>
<ul>
<li><p>拥塞避免： 拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送方的cwnd加1.</p>
</li>
<li><p>快重传与快恢复：<br>在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。  当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</p>
</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb96ohq96j30wm0i0gmn.jpg" alt="undefined"></p>
<h1 id="五-在浏览器中输入url地址-gt-gt-显示主页的过程（面试常客）"><a href="#五-在浏览器中输入url地址-gt-gt-显示主页的过程（面试常客）" class="headerlink" title="五 在浏览器中输入url地址 -&gt;&gt; 显示主页的过程（面试常客）"></a>五 在浏览器中输入url地址 -&gt;&gt; 显示主页的过程（面试常客）</h1><blockquote>
<p>打开一个网页，整个过程会使用哪些协议</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb97hdzhuj30g40csjrp.jpg" alt="undefined"></p>
<h1 id="六-状态码"><a href="#六-状态码" class="headerlink" title="六 状态码"></a>六 状态码</h1><p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb9jd08ylj30ip06274m.jpg" alt="undefined"></p>
<h1 id="七-各种协议与HTTP协议之间的关系"><a href="#七-各种协议与HTTP协议之间的关系" class="headerlink" title="七 各种协议与HTTP协议之间的关系"></a>七 各种协议与HTTP协议之间的关系</h1><p><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghb9kz8docj30nd0x575m.jpg" alt="undefined"></p>
<h1 id="八-HTTP长连接、短连接"><a href="#八-HTTP长连接、短连接" class="headerlink" title="八 HTTP长连接、短连接"></a>八 HTTP长连接、短连接</h1><p><strong>在HTTP/1.0中默认使用短连接</strong>。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。<br>而从<strong>HTTP/1.1起，默认使用长连接</strong>，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p>
<p><code>Connection:keep-alive</code></p>
<p>复制代码在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。<br><strong>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</strong><br><a href="https://www.cnblogs.com/gotodsp/p/6366163.html" target="_blank" rel="noopener">—— 《HTTP长连接、短连接究竟是什么？》</a></p>
<h2 id="HTTP与HTTPS的区别"><a href="#HTTP与HTTPS的区别" class="headerlink" title="HTTP与HTTPS的区别"></a>HTTP与HTTPS的区别</h2><p>超文本传输协议HTTP协议被用于在Web浏览器和网站服务器之间传递信息，HTTP协议以<strong>明文方式</strong>发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p>
<p>　　为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS，为了数据传输的安全，<strong>HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密</strong>。</p>
<h3 id="1-HTTP和HTTPS的基本概念"><a href="#1-HTTP和HTTPS的基本概念" class="headerlink" title="1 HTTP和HTTPS的基本概念"></a>1 HTTP和HTTPS的基本概念</h3><p>　　HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p>
<p>　　HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p>
<p>　　HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p>
<h3 id="2-HTTP与HTTPS有什么区别？"><a href="#2-HTTP与HTTPS有什么区别？" class="headerlink" title="2 HTTP与HTTPS有什么区别？"></a>2 HTTP与HTTPS有什么区别？</h3><p>　　HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</p>
<p>　　HTTPS和HTTP的区别主要如下：</p>
<p>　　1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p>
<p>　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>
<p>　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>
<p>　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p>
<h3 id="3-HTTPS的工作原理"><a href="#3-HTTPS的工作原理" class="headerlink" title="3 HTTPS的工作原理"></a>3 HTTPS的工作原理</h3><p>　　我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。<br><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghba3dc5odj30go03rmy4.jpg" alt="undefined"></p>
<p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤，如图所示。</p>
<p>　　（1）客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</p>
<p>　　（2）Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p>
<p>　　（3）客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</p>
<p>　　（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p>
<p>　　（5）Web服务器利用自己的私钥解密出会话密钥。</p>
<p>　　（6）Web服务器利用会话密钥加密与客户端之间的通信。<br><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1ghba4ow5mfg30a50bf3yd.gif" alt="undefined"></p>
<h1 id="九-cookie-和session-的区别"><a href="#九-cookie-和session-的区别" class="headerlink" title="九 cookie 和session 的区别"></a>九 cookie 和session 的区别</h1><p>二者的定义：</p>
<p>当你在浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。</p>
<p>具体来说cookie机制采用的是在<strong>客户端保持状态</strong>的方案，而session机制采用的是在<strong>服务器端保持状态</strong>的方案。</p>
<p>同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以<strong>session机制可能需要借助于cookie机制</strong>来达到保存标识的目的，但实际上它还有其他选择。</p>
<p>cookie机制。正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。</p>
<p>cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式</p>
<p>session机制。session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p>
<p>cookie 和session 的区别：</p>
<p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>
<p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br>   考虑到安全应当使用session。</p>
<p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br>   考虑到减轻服务器性能方面，应当使用COOKIE。</p>
<p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
<p>5、建议：<br>   将登陆信息等重要信息存放为SESSION<br>   其他信息如果需要保留，可以放在COOKIE中</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><h2 id="计算机网络常见问题回顾"><a href="#计算机网络常见问题回顾" class="headerlink" title="计算机网络常见问题回顾"></a>计算机网络常见问题回顾</h2><ul>
<li>①TCP三次握手和四次挥手、</li>
<li>②在浏览器中输入url地址-&gt;&gt;显示主页的过程</li>
<li>③HTTP和HTTPS的区别</li>
<li>④TCP、UDP协议的区别</li>
<li>⑤常见的状态码。<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2>《图解HTTP》<h2 id="开源文档推荐"><a href="#开源文档推荐" class="headerlink" title="开源文档推荐"></a>开源文档推荐</h2>Java-Guide：一份涵盖大部分Java程序员所需要掌握的核心知识，正在一步一步慢慢完善，期待您的参与。</li>
</ul>
<p>Github地址：<a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener">github.com/Snailclimb/…</a></p>
<p>作者：JavaGuide<br>链接：<a href="https://juejin.im/post/6844903662838349838" target="_blank" rel="noopener">https://juejin.im/post/6844903662838349838</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>项目记录</title>
    <url>/2020/08/19/%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="导入原始流量数据分析包"><a href="#导入原始流量数据分析包" class="headerlink" title="导入原始流量数据分析包"></a>导入原始流量数据分析包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看流量结构信息</span></span><br><span class="line">pkts = rdpcap(<span class="string">"./data/test.pcap"</span>)</span><br><span class="line">pkts[<span class="number">0</span>].show()</span><br></pre></td></tr></table></figure>

<pre><code>###[ Ethernet ]### 
  dst       = 52:54:00:12:34:56
  src       = 52:55:10:00:02:02
  type      = IPv4
###[ IP ]### 
     version   = 4
     ihl       = 5
     tos       = 0x0
     len       = 48
     id        = 645
     flags     = DF
     frag      = 0
     ttl       = 128
     proto     = tcp
     chksum    = 0xb48e
     src       = 192.168.0.67
     dst       = 115.223.14.234
     \options   \
###[ TCP ]### 
        sport     = 1040
        dport     = https
        seq       = 1155960802
        ack       = 0
        dataofs   = 7
        reserved  = 0
        flags     = S
        window    = 65535
        chksum    = 0x64d7
        urgptr    = 0
        options   = [(&apos;MSS&apos;, 1460), (&apos;NOP&apos;, None), (&apos;NOP&apos;, None), (&apos;SAckOK&apos;, b&apos;&apos;)]</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [Ethernet] </span></span><br><span class="line"><span class="comment"># dst: 目标mac地址 </span></span><br><span class="line"><span class="comment"># scr：本地mac地址 </span></span><br><span class="line"><span class="comment"># type：IPv4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [IP] </span></span><br><span class="line"><span class="comment"># version  </span></span><br><span class="line"><span class="comment"># ihl    首部长度（Internet Header Length， IHL）   </span></span><br><span class="line"><span class="comment"># tos   服务类型type of serve</span></span><br><span class="line"><span class="comment"># len   IP包长度</span></span><br><span class="line"><span class="comment"># id       </span></span><br><span class="line"><span class="comment"># flags    标志字段</span></span><br><span class="line"><span class="comment"># frag     碎片</span></span><br><span class="line"><span class="comment"># ttl      数据包在网络中的时间是否太长而应被丢弃time to live</span></span><br><span class="line"><span class="comment"># proto    协议</span></span><br><span class="line"><span class="comment"># chksum   校验和</span></span><br><span class="line"><span class="comment"># dst       目的ip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [TCP]</span></span><br><span class="line"><span class="comment"># sport     源端口</span></span><br><span class="line"><span class="comment"># dport     目标端口</span></span><br><span class="line"><span class="comment"># seq       顺序号码</span></span><br><span class="line"><span class="comment"># ack       确认</span></span><br><span class="line"><span class="comment"># dataofs   数据偏移字段</span></span><br><span class="line"><span class="comment"># reserved  </span></span><br><span class="line"><span class="comment"># flags    标志</span></span><br><span class="line"><span class="comment"># window   窗口大小</span></span><br><span class="line"><span class="comment"># chksum   校验和</span></span><br><span class="line"><span class="comment"># urgptr   </span></span><br><span class="line"><span class="comment"># options   头部选项字段</span></span><br></pre></td></tr></table></figure>

<h3 id="原始流量数据集："><a href="#原始流量数据集：" class="headerlink" title="原始流量数据集："></a>原始流量数据集：</h3><p>train.py</p>
<ul>
<li>black (1500个pcap文件) </li>
<li>white (1500个pcap文件)</li>
</ul>
<p>test.py (没有提供标签)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">"./data/train.csv"</span>)</span><br><span class="line">data.shape</span><br></pre></td></tr></table></figure>




<pre><code>(1752060, 24)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>dst</th>
      <th>src</th>
      <th>type</th>
      <th>version</th>
      <th>ihl</th>
      <th>tos</th>
      <th>len</th>
      <th>id</th>
      <th>flags</th>
      <th>frag</th>
      <th>...</th>
      <th>dport</th>
      <th>seq</th>
      <th>ack</th>
      <th>dataofs</th>
      <th>reserved</th>
      <th>flags.1</th>
      <th>window</th>
      <th>chksum.1</th>
      <th>urgptr</th>
      <th>label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>52:54:00:12:34:56</td>
      <td>52:55:10:00:02:02</td>
      <td>2048</td>
      <td>4</td>
      <td>5</td>
      <td>0</td>
      <td>48</td>
      <td>196</td>
      <td>DF</td>
      <td>0</td>
      <td>...</td>
      <td>443</td>
      <td>3781184629</td>
      <td>0</td>
      <td>7</td>
      <td>0</td>
      <td>S</td>
      <td>65535</td>
      <td>15493</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>52:54:00:12:34:56</td>
      <td>52:55:10:00:02:02</td>
      <td>2048</td>
      <td>4</td>
      <td>5</td>
      <td>0</td>
      <td>48</td>
      <td>197</td>
      <td>DF</td>
      <td>0</td>
      <td>...</td>
      <td>443</td>
      <td>3781184629</td>
      <td>0</td>
      <td>7</td>
      <td>0</td>
      <td>S</td>
      <td>65535</td>
      <td>15493</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>52:54:00:12:34:56</td>
      <td>52:55:10:00:02:02</td>
      <td>2048</td>
      <td>4</td>
      <td>5</td>
      <td>0</td>
      <td>48</td>
      <td>198</td>
      <td>DF</td>
      <td>0</td>
      <td>...</td>
      <td>443</td>
      <td>3781184629</td>
      <td>0</td>
      <td>7</td>
      <td>0</td>
      <td>S</td>
      <td>65535</td>
      <td>15493</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>52:54:00:12:34:56</td>
      <td>52:55:10:00:02:02</td>
      <td>2048</td>
      <td>4</td>
      <td>5</td>
      <td>0</td>
      <td>48</td>
      <td>199</td>
      <td>DF</td>
      <td>0</td>
      <td>...</td>
      <td>443</td>
      <td>2676329384</td>
      <td>0</td>
      <td>7</td>
      <td>0</td>
      <td>S</td>
      <td>65535</td>
      <td>16171</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>52:55:10:00:02:02</td>
      <td>52:54:00:12:34:56</td>
      <td>2048</td>
      <td>4</td>
      <td>5</td>
      <td>0</td>
      <td>44</td>
      <td>3</td>
      <td>NaN</td>
      <td>0</td>
      <td>...</td>
      <td>1034</td>
      <td>2752001</td>
      <td>2676329385</td>
      <td>6</td>
      <td>0</td>
      <td>SA</td>
      <td>8192</td>
      <td>13814</td>
      <td>0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 24 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;
RangeIndex: 1752060 entries, 0 to 1752059
Data columns (total 24 columns):
dst         object
src         object
type        int64
version     int64
ihl         int64
tos         int64
len         int64
id          int64
flags       object
frag        int64
ttl         int64
proto       int64
chksum      int64
sport       int64
dport       int64
seq         int64
ack         int64
dataofs     int64
reserved    int64
flags.1     object
window      int64
chksum.1    int64
urgptr      int64
label       int64
dtypes: int64(20), object(4)
memory usage: 320.8+ MB</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DNN模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.utils <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">1337</span>)  <span class="comment"># for reproducibility</span></span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> sequence</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Dropout, Activation, Embedding</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM, SimpleRNN, GRU</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> imdb</span><br><span class="line"><span class="keyword">from</span> keras.utils.np_utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> (precision_score, recall_score,f1_score, accuracy_score,mean_squared_error,mean_absolute_error)</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Normalizer</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> callbacks</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> ModelCheckpoint, EarlyStopping, ReduceLROnPlateau, CSVLogger</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">"./data/train.csv"</span>)</span><br><span class="line">data = shuffle(data)</span><br><span class="line"><span class="comment"># 选取了其中数值特征作为训练</span></span><br><span class="line">x = data.iloc[:,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>]]</span><br><span class="line">y = data.iloc[:,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集 7:3</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = <span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">scaler=Normalizer().fit(x_train)</span><br><span class="line">x_train=scaler.transform(x_train)</span><br><span class="line"></span><br><span class="line">scaler=Normalizer().fit(x_test)</span><br><span class="line">x_test=scaler.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组转换</span></span><br><span class="line">x_train=np.array(x_train)</span><br><span class="line">y_train=np.array(y_train)</span><br><span class="line">x_test=np.array(x_test)</span><br><span class="line">y_test=np.array(y_test)</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. define the network</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">128</span>,input_dim=<span class="number">18</span>,activation=<span class="string">'relu'</span>))</span><br><span class="line">model.add(Dense(<span class="number">64</span>))</span><br><span class="line">model.add(Dense(<span class="number">32</span>))</span><br><span class="line">model.add(Dense(<span class="number">1</span>))</span><br><span class="line">model.add(Activation(<span class="string">'sigmoid'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># try using different optimizers and different optimizer configs</span></span><br><span class="line">model.compile(loss=<span class="string">'binary_crossentropy'</span>,optimizer=<span class="string">'adam'</span>,metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.fit(x_train, y_train, batch_size=batch_size, nb_epoch=<span class="number">200</span>, callbacks=<span class="literal">None</span>,verbose=<span class="number">2</span>)</span><br><span class="line">loss,accuracy = model.evaluate(x_test,y_test,verbose=<span class="number">2</span>)</span><br><span class="line">print(loss,accuracy)</span><br></pre></td></tr></table></figure>

<pre><code>D:\anaconda3\envs\tensorflow-gpu\lib\site-packages\ipykernel_launcher.py:55: UserWarning: The `nb_epoch` argument in `fit` has been renamed `epochs`.


Epoch 1/200
 - 4s - loss: 0.6592 - acc: 0.6275
Epoch 2/200
 - 4s - loss: 0.6573 - acc: 0.6311
Epoch 3/200
 - 4s - loss: 0.6571 - acc: 0.6313
Epoch 4/200
 - 4s - loss: 0.6567 - acc: 0.6316
Epoch 5/200
 - 4s - loss: 0.6566 - acc: 0.6319
Epoch 6/200
 - 4s - loss: 0.6563 - acc: 0.6322
Epoch 7/200
 - 4s - loss: 0.6558 - acc: 0.6328
Epoch 8/200
 - 4s - loss: 0.6553 - acc: 0.6337
Epoch 9/200
 - 4s - loss: 0.6542 - acc: 0.6354
Epoch 10/200
 - 4s - loss: 0.6512 - acc: 0.6384
Epoch 11/200
 - 4s - loss: 0.6401 - acc: 0.6442
Epoch 12/200
 - 4s - loss: 0.6149 - acc: 0.6652
Epoch 13/200
 - 4s - loss: 0.5915 - acc: 0.6933
Epoch 14/200
 - 5s - loss: 0.5746 - acc: 0.7140
Epoch 15/200
 - 4s - loss: 0.5644 - acc: 0.7247
Epoch 16/200
 - 4s - loss: 0.5575 - acc: 0.7296
Epoch 17/200
 - 4s - loss: 0.5538 - acc: 0.7319
Epoch 18/200
 - 4s - loss: 0.5506 - acc: 0.7333
Epoch 19/200
 - 4s - loss: 0.5482 - acc: 0.7356
Epoch 20/200
 - 4s - loss: 0.5430 - acc: 0.7372
Epoch 21/200
 - 4s - loss: 0.5399 - acc: 0.7395
Epoch 22/200
 - 4s - loss: 0.5370 - acc: 0.7411
Epoch 23/200
 - 4s - loss: 0.5327 - acc: 0.7432
Epoch 24/200
 - 4s - loss: 0.5298 - acc: 0.7449
Epoch 25/200
 - 4s - loss: 0.5289 - acc: 0.7456
Epoch 26/200
 - 4s - loss: 0.5257 - acc: 0.7463
Epoch 27/200
 - 4s - loss: 0.5235 - acc: 0.7478
Epoch 28/200
 - 4s - loss: 0.5215 - acc: 0.7489
Epoch 29/200
 - 4s - loss: 0.5174 - acc: 0.7517
Epoch 30/200
 - 4s - loss: 0.5151 - acc: 0.7527
Epoch 31/200
 - 4s - loss: 0.5133 - acc: 0.7539
Epoch 32/200
 - 4s - loss: 0.5111 - acc: 0.7555
Epoch 33/200
 - 4s - loss: 0.5078 - acc: 0.7561
Epoch 34/200
 - 4s - loss: 0.5096 - acc: 0.7555
Epoch 35/200
 - 4s - loss: 0.5022 - acc: 0.7599
Epoch 36/200
 - 4s - loss: 0.5017 - acc: 0.7608
Epoch 37/200
 - 4s - loss: 0.4988 - acc: 0.7619
Epoch 38/200
 - 4s - loss: 0.4981 - acc: 0.7617
Epoch 39/200
 - 4s - loss: 0.4982 - acc: 0.7629
Epoch 40/200
 - 4s - loss: 0.4971 - acc: 0.7619
Epoch 41/200
 - 4s - loss: 0.4942 - acc: 0.7634
Epoch 42/200
 - 4s - loss: 0.4947 - acc: 0.7623
Epoch 43/200
 - 4s - loss: 0.4920 - acc: 0.7627
Epoch 44/200
 - 4s - loss: 0.4914 - acc: 0.7634
Epoch 45/200
 - 4s - loss: 0.4896 - acc: 0.7651
Epoch 46/200
 - 4s - loss: 0.4880 - acc: 0.7670
Epoch 47/200
 - 4s - loss: 0.4865 - acc: 0.7667
Epoch 48/200
 - 4s - loss: 0.4906 - acc: 0.7659
Epoch 49/200
 - 4s - loss: 0.4893 - acc: 0.7669
Epoch 50/200
 - 4s - loss: 0.4933 - acc: 0.7648
Epoch 51/200
 - 4s - loss: 0.4879 - acc: 0.7680
Epoch 52/200
 - 4s - loss: 0.4879 - acc: 0.7681
Epoch 53/200
 - 4s - loss: 0.4865 - acc: 0.7692
Epoch 54/200
 - 4s - loss: 0.4845 - acc: 0.7696
Epoch 55/200
 - 4s - loss: 0.4852 - acc: 0.7691
Epoch 56/200
 - 4s - loss: 0.4821 - acc: 0.7712
Epoch 57/200
 - 4s - loss: 0.4844 - acc: 0.7692
Epoch 58/200
 - 4s - loss: 0.4782 - acc: 0.7731
Epoch 59/200
 - 4s - loss: 0.4776 - acc: 0.7738
Epoch 60/200
 - 4s - loss: 0.4777 - acc: 0.7733
Epoch 61/200
 - 4s - loss: 0.4772 - acc: 0.7733
Epoch 62/200
 - 4s - loss: 0.4768 - acc: 0.7741
Epoch 63/200
 - 4s - loss: 0.4734 - acc: 0.7757
Epoch 64/200
 - 4s - loss: 0.4725 - acc: 0.7770
Epoch 65/200
 - 4s - loss: 0.4707 - acc: 0.7782
Epoch 66/200
 - 4s - loss: 0.4701 - acc: 0.7777
Epoch 67/200
 - 4s - loss: 0.4674 - acc: 0.7793
Epoch 68/200
 - 4s - loss: 0.4666 - acc: 0.7802
Epoch 69/200
 - 4s - loss: 0.4652 - acc: 0.7798
Epoch 70/200
 - 4s - loss: 0.4648 - acc: 0.7804
Epoch 71/200
 - 4s - loss: 0.4640 - acc: 0.7814
Epoch 72/200
 - 4s - loss: 0.4640 - acc: 0.7811
Epoch 73/200
 - 4s - loss: 0.4605 - acc: 0.7836
Epoch 74/200
 - 4s - loss: 0.4617 - acc: 0.7820
Epoch 75/200
 - 4s - loss: 0.4598 - acc: 0.7834
Epoch 76/200
 - 4s - loss: 0.4599 - acc: 0.7832
Epoch 77/200
 - 4s - loss: 0.4575 - acc: 0.7847
Epoch 78/200
 - 4s - loss: 0.4563 - acc: 0.7853
Epoch 79/200
 - 4s - loss: 0.4581 - acc: 0.7836
Epoch 80/200
 - 4s - loss: 0.4565 - acc: 0.7851
Epoch 81/200
 - 4s - loss: 0.4549 - acc: 0.7861
Epoch 82/200
 - 4s - loss: 0.4534 - acc: 0.7870
Epoch 83/200
 - 4s - loss: 0.4533 - acc: 0.7876
Epoch 84/200
 - 4s - loss: 0.4536 - acc: 0.7871
Epoch 85/200
 - 4s - loss: 0.4522 - acc: 0.7882
Epoch 86/200
 - 4s - loss: 0.4503 - acc: 0.7884
Epoch 87/200
 - 4s - loss: 0.4498 - acc: 0.7897
Epoch 88/200
 - 4s - loss: 0.4487 - acc: 0.7893
Epoch 89/200
 - 4s - loss: 0.4489 - acc: 0.7890
Epoch 90/200
 - 4s - loss: 0.4494 - acc: 0.7890
Epoch 91/200
 - 4s - loss: 0.4479 - acc: 0.7899
Epoch 92/200
 - 4s - loss: 0.4468 - acc: 0.7908
Epoch 93/200
 - 4s - loss: 0.4476 - acc: 0.7902
Epoch 94/200
 - 4s - loss: 0.4426 - acc: 0.7939
Epoch 95/200
 - 4s - loss: 0.4442 - acc: 0.7930
Epoch 96/200
 - 4s - loss: 0.4403 - acc: 0.7953
Epoch 97/200
 - 4s - loss: 0.4436 - acc: 0.7929
Epoch 98/200
 - 4s - loss: 0.4407 - acc: 0.7948
Epoch 99/200
 - 4s - loss: 0.4418 - acc: 0.7950
Epoch 100/200
 - 4s - loss: 0.4601 - acc: 0.7886
Epoch 101/200
 - 4s - loss: 0.4545 - acc: 0.7913
Epoch 102/200
 - 4s - loss: 0.4562 - acc: 0.7895
Epoch 103/200
 - 4s - loss: 0.4569 - acc: 0.7879
Epoch 104/200
 - 4s - loss: 0.4516 - acc: 0.7910
Epoch 105/200
 - 4s - loss: 0.4516 - acc: 0.7910
Epoch 106/200
 - 4s - loss: 0.4638 - acc: 0.7840
Epoch 107/200
 - 4s - loss: 0.4592 - acc: 0.7868
Epoch 108/200
 - 4s - loss: 0.4649 - acc: 0.7850
Epoch 109/200
 - 4s - loss: 0.4640 - acc: 0.7861
Epoch 110/200
 - 4s - loss: 0.4616 - acc: 0.7878
Epoch 111/200
 - 4s - loss: 0.4576 - acc: 0.7889
Epoch 112/200
 - 4s - loss: 0.4551 - acc: 0.7898
Epoch 113/200
 - 4s - loss: 0.4532 - acc: 0.7910
Epoch 114/200
 - 4s - loss: 0.4514 - acc: 0.7910
Epoch 115/200
 - 4s - loss: 0.4478 - acc: 0.7934
Epoch 116/200
 - 4s - loss: 0.4485 - acc: 0.7925
Epoch 117/200
 - 4s - loss: 0.4453 - acc: 0.7946
Epoch 118/200
 - 4s - loss: 0.4452 - acc: 0.7936
Epoch 119/200
 - 4s - loss: 0.4439 - acc: 0.7945
Epoch 120/200
 - 4s - loss: 0.4410 - acc: 0.7960
Epoch 121/200
 - 4s - loss: 0.4427 - acc: 0.7951
Epoch 122/200
 - 4s - loss: 0.4411 - acc: 0.7952
Epoch 123/200
 - 4s - loss: 0.4400 - acc: 0.7955
Epoch 124/200
 - 4s - loss: 0.4372 - acc: 0.7974
Epoch 125/200
 - 4s - loss: 0.4378 - acc: 0.7966
Epoch 126/200
 - 4s - loss: 0.4360 - acc: 0.7973
Epoch 127/200
 - 4s - loss: 0.4344 - acc: 0.7985
Epoch 128/200
 - 4s - loss: 0.4316 - acc: 0.8000
Epoch 129/200
 - 4s - loss: 0.4344 - acc: 0.7976
Epoch 130/200
 - 4s - loss: 0.4335 - acc: 0.7984
Epoch 131/200
 - 4s - loss: 0.4303 - acc: 0.8008
Epoch 132/200
 - 4s - loss: 0.4341 - acc: 0.7980
Epoch 133/200
 - 4s - loss: 0.4331 - acc: 0.7978
Epoch 134/200
 - 4s - loss: 0.4296 - acc: 0.8006
Epoch 135/200
 - 4s - loss: 0.4279 - acc: 0.8015
Epoch 136/200
 - 4s - loss: 0.4277 - acc: 0.8012
Epoch 137/200
 - 4s - loss: 0.4296 - acc: 0.8000
Epoch 138/200
 - 4s - loss: 0.4253 - acc: 0.8032
Epoch 139/200
 - 4s - loss: 0.4264 - acc: 0.8026
Epoch 140/200
 - 4s - loss: 0.4292 - acc: 0.8005
Epoch 141/200
 - 4s - loss: 0.4341 - acc: 0.7956
Epoch 142/200
 - 4s - loss: 0.4346 - acc: 0.7946
Epoch 143/200
 - 4s - loss: 0.4349 - acc: 0.7942
Epoch 144/200
 - 4s - loss: 0.4463 - acc: 0.7891
Epoch 145/200
 - 4s - loss: 0.4489 - acc: 0.7876
Epoch 146/200
 - 4s - loss: 0.4474 - acc: 0.7882
Epoch 147/200
 - 4s - loss: 0.4441 - acc: 0.7905
Epoch 148/200
 - 4s - loss: 0.4460 - acc: 0.7889
Epoch 149/200
 - 4s - loss: 0.4426 - acc: 0.7906
Epoch 150/200
 - 4s - loss: 0.4411 - acc: 0.7915
Epoch 151/200
 - 4s - loss: 0.4367 - acc: 0.7946
Epoch 152/200
 - 4s - loss: 0.4392 - acc: 0.7929
Epoch 153/200
 - 4s - loss: 0.4391 - acc: 0.7937
Epoch 154/200
 - 4s - loss: 0.4421 - acc: 0.7920
Epoch 155/200
 - 4s - loss: 0.4398 - acc: 0.7931
Epoch 156/200
 - 4s - loss: 0.4394 - acc: 0.7935
Epoch 157/200
 - 4s - loss: 0.4386 - acc: 0.7935
Epoch 158/200
 - 4s - loss: 0.4362 - acc: 0.7952
Epoch 159/200
 - 4s - loss: 0.4369 - acc: 0.7948
Epoch 160/200
 - 4s - loss: 0.4344 - acc: 0.7962
Epoch 161/200
 - 4s - loss: 0.4319 - acc: 0.7975
Epoch 162/200
 - 4s - loss: 0.4324 - acc: 0.7966
Epoch 163/200
 - 4s - loss: 0.4307 - acc: 0.7981
Epoch 164/200
 - 4s - loss: 0.4295 - acc: 0.7985
Epoch 165/200
 - 4s - loss: 0.4280 - acc: 0.7997
Epoch 166/200
 - 4s - loss: 0.4279 - acc: 0.8000
Epoch 167/200
 - 4s - loss: 0.4268 - acc: 0.8000
Epoch 168/200
 - 4s - loss: 0.4278 - acc: 0.7995
Epoch 169/200
 - 4s - loss: 0.4244 - acc: 0.8014
Epoch 170/200
 - 4s - loss: 0.4235 - acc: 0.8019
Epoch 171/200
 - 4s - loss: 0.4242 - acc: 0.8007
Epoch 172/200
 - 4s - loss: 0.4229 - acc: 0.8023
Epoch 173/200
 - 4s - loss: 0.4238 - acc: 0.8014
Epoch 174/200
 - 4s - loss: 0.4237 - acc: 0.8017
Epoch 175/200
 - 4s - loss: 0.4202 - acc: 0.8036
Epoch 176/200
 - 4s - loss: 0.4359 - acc: 0.7952
Epoch 177/200
 - 4s - loss: 0.4371 - acc: 0.7935
Epoch 178/200
 - 4s - loss: 0.4340 - acc: 0.7955
Epoch 179/200
 - 4s - loss: 0.4354 - acc: 0.7955
Epoch 180/200
 - 4s - loss: 0.4367 - acc: 0.7952
Epoch 181/200
 - 4s - loss: 0.4339 - acc: 0.7964
Epoch 182/200
 - 4s - loss: 0.4369 - acc: 0.7964
Epoch 183/200
 - 4s - loss: 0.4481 - acc: 0.7963
Epoch 184/200
 - 4s - loss: 0.4412 - acc: 0.7996
Epoch 185/200
 - 4s - loss: 0.4403 - acc: 0.7982
Epoch 186/200
 - 4s - loss: 0.4388 - acc: 0.7985
Epoch 187/200
 - 4s - loss: 0.4360 - acc: 0.8002
Epoch 188/200
 - 4s - loss: 0.4433 - acc: 0.7952
Epoch 189/200
 - 4s - loss: 0.4400 - acc: 0.7971
Epoch 190/200
 - 4s - loss: 0.4426 - acc: 0.7955
Epoch 191/200
 - 4s - loss: 0.4406 - acc: 0.7968
Epoch 192/200
 - 4s - loss: 0.4408 - acc: 0.7968
Epoch 193/200
 - 4s - loss: 0.4396 - acc: 0.7972
Epoch 194/200
 - 4s - loss: 0.4397 - acc: 0.7970
Epoch 195/200
 - 4s - loss: 0.4383 - acc: 0.7981
Epoch 196/200
 - 4s - loss: 0.4387 - acc: 0.7976
Epoch 197/200
 - 4s - loss: 0.4368 - acc: 0.7990
Epoch 198/200
 - 4s - loss: 0.4402 - acc: 0.7965
Epoch 199/200
 - 4s - loss: 0.4360 - acc: 0.7991
Epoch 200/200
 - 4s - loss: 0.4360 - acc: 0.7997
0.43021377035252795 0.7874159560738833</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score,precision_score,recall_score,f1_score,confusion_matrix</span><br><span class="line"></span><br><span class="line">model=DecisionTreeClassifier()</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">predicted=model.predict(x_test)</span><br><span class="line">accuracy=accuracy_score(y_test,predicted)</span><br><span class="line">precision=precision_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">recall=recall_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">f1=f1_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">print(<span class="string">"Accuracy:"</span>,accuracy)</span><br><span class="line">print(<span class="string">"Precision:"</span>,precision)</span><br><span class="line">print(<span class="string">"Recall:"</span>,recall)</span><br><span class="line">print(<span class="string">"F1:"</span>,f1)</span><br></pre></td></tr></table></figure>

<pre><code>Accuracy: 0.9642687274788915
Precision: 0.9260356995707014
Recall: 0.9901188017507626
F1: 0.9570056658845075</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score,precision_score,recall_score,f1_score,confusion_matrix</span><br><span class="line"></span><br><span class="line">model=GaussianNB()</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">predicted=model.predict(x_test)</span><br><span class="line">accuracy=accuracy_score(y_test,predicted)</span><br><span class="line">precision=precision_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">recall=recall_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">f1=f1_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">print(<span class="string">"Accuracy:"</span>,accuracy)</span><br><span class="line">print(<span class="string">"Precision:"</span>,precision)</span><br><span class="line">print(<span class="string">"Recall:"</span>,recall)</span><br><span class="line">print(<span class="string">"F1:"</span>,f1)</span><br></pre></td></tr></table></figure>

<pre><code>Accuracy: 0.6075343690665084
Precision: 0.6645055620009555
Recall: 0.04612331129090323
F1: 0.08625936277745049</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score,precision_score,recall_score,f1_score,confusion_matrix</span><br><span class="line"></span><br><span class="line">model=LogisticRegression()</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">predicted=model.predict(x_test)</span><br><span class="line">accuracy=accuracy_score(y_test,predicted)</span><br><span class="line">precision=precision_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">recall=recall_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">f1=f1_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">print(<span class="string">"Accuracy:"</span>,accuracy)</span><br><span class="line">print(<span class="string">"Precision:"</span>,precision)</span><br><span class="line">print(<span class="string">"Recall:"</span>,recall)</span><br><span class="line">print(<span class="string">"F1:"</span>,f1)</span><br></pre></td></tr></table></figure>

<pre><code>D:\anaconda3\envs\tensorflow-gpu\lib\site-packages\sklearn\linear_model\logistic.py:432: FutureWarning: Default solver will be changed to &apos;lbfgs&apos; in 0.22. Specify a solver to silence this warning.
  FutureWarning)


Accuracy: 0.632501170051254
Precision: 0.7340969576788603
Recall: 0.13327301665498228
F1: 0.2255907374295405</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score,precision_score,recall_score,f1_score,confusion_matrix</span><br><span class="line"></span><br><span class="line">model=RandomForestClassifier()</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">predicted=model.predict(x_test)</span><br><span class="line">accuracy=accuracy_score(y_test,predicted)</span><br><span class="line">precision=precision_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">recall=recall_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">f1=f1_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">print(<span class="string">"Accuracy:"</span>,accuracy)</span><br><span class="line">print(<span class="string">"Precision:"</span>,precision)</span><br><span class="line">print(<span class="string">"Recall:"</span>,recall)</span><br><span class="line">print(<span class="string">"F1:"</span>,f1)</span><br></pre></td></tr></table></figure>

<pre><code>D:\anaconda3\envs\tensorflow-gpu\lib\site-packages\sklearn\ensemble\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.
  &quot;10 in version 0.20 to 100 in 0.22.&quot;, FutureWarning)


Accuracy: 0.8054499655643452
Precision: 0.8850908164637123
Recall: 0.592535574208462
F1: 0.7098516898055539</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score,precision_score,recall_score,f1_score,confusion_matrix</span><br><span class="line"></span><br><span class="line">model=AdaBoostClassifier()</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">predicted=model.predict(x_test)</span><br><span class="line">accuracy=accuracy_score(y_test,predicted)</span><br><span class="line">precision=precision_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">recall=recall_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">f1=f1_score(y_test,predicted,average=<span class="string">'binary'</span>)</span><br><span class="line">print(<span class="string">"Accuracy:"</span>,accuracy)</span><br><span class="line">print(<span class="string">"Precision:"</span>,precision)</span><br><span class="line">print(<span class="string">"Recall:"</span>,recall)</span><br><span class="line">print(<span class="string">"F1:"</span>,f1)</span><br></pre></td></tr></table></figure>

<pre><code>Accuracy: 0.7218074723468374
Precision: 0.7559626657830165
Recall: 0.45387195179718437
F1: 0.5672019061431679</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">1337</span>)  <span class="comment"># for reproducibility</span></span><br><span class="line"><span class="keyword">from</span> keras.preprocessing <span class="keyword">import</span> sequence</span><br><span class="line"><span class="keyword">from</span> keras.utils <span class="keyword">import</span> np_utils</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Dropout, Activation, Embedding</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> LSTM, SimpleRNN, GRU</span><br><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> imdb</span><br><span class="line"><span class="keyword">from</span> keras.utils.np_utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> (precision_score, recall_score,f1_score, accuracy_score,mean_squared_error,mean_absolute_error)</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> Normalizer</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> callbacks</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> ModelCheckpoint, EarlyStopping, ReduceLROnPlateau, CSVLogger</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">"./data/train.csv"</span>)</span><br><span class="line">data = shuffle(data)</span><br><span class="line"><span class="comment"># 选取了其中数值特征作为训练</span></span><br><span class="line">x = data.iloc[:,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>]]</span><br><span class="line">y = data.iloc[:,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集 7:3</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = <span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">scaler=Normalizer().fit(x_train)</span><br><span class="line">x_train=scaler.transform(x_train)</span><br><span class="line"></span><br><span class="line">scaler=Normalizer().fit(x_test)</span><br><span class="line">x_test=scaler.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组转换</span></span><br><span class="line">x_train=np.array(x_train)</span><br><span class="line">y_train=np.array(y_train)</span><br><span class="line">x_test=np.array(x_test)</span><br><span class="line">y_test=np.array(y_test)</span><br><span class="line"><span class="comment"># reshape input to be [samples, time steps, features]</span></span><br><span class="line">x_train = np.reshape(x_train, (x_train.shape[<span class="number">0</span>], <span class="number">1</span>, x_train.shape[<span class="number">1</span>]))</span><br><span class="line">x_test = np.reshape(x_test, (x_test.shape[<span class="number">0</span>], <span class="number">1</span>, x_test.shape[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. define the network</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(LSTM(<span class="number">64</span>,input_dim=<span class="number">18</span>))  <span class="comment"># try using a GRU instead, for fun</span></span><br><span class="line">model.add(Dropout(<span class="number">0.1</span>))</span><br><span class="line">model.add(Dense(<span class="number">1</span>))</span><br><span class="line">model.add(Activation(<span class="string">'sigmoid'</span>))</span><br><span class="line">print(model.get_config())</span><br><span class="line"></span><br><span class="line"><span class="comment"># try using different optimizers and different optimizer configs</span></span><br><span class="line">model.compile(loss=<span class="string">'binary_crossentropy'</span>,optimizer=<span class="string">'adam'</span>,metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">model.fit(x_train, y_train, batch_size=batch_size, nb_epoch=<span class="number">50</span>,callbacks=<span class="literal">None</span>,verbose=<span class="number">2</span>)</span><br><span class="line">loss, accuracy = model.evaluate(x_test, y_test)</span><br><span class="line">print(<span class="string">"\nLoss: %.2f, Accuracy: %.2f%%"</span> % (loss, accuracy*<span class="number">100</span>))</span><br></pre></td></tr></table></figure>

<pre><code>D:\anaconda3\envs\tensorflow-gpu\lib\site-packages\ipykernel_launcher.py:49: UserWarning: The `input_dim` and `input_length` arguments in recurrent layers are deprecated. Use `input_shape` instead.
D:\anaconda3\envs\tensorflow-gpu\lib\site-packages\ipykernel_launcher.py:49: UserWarning: Update your `LSTM` call to the Keras 2 API: `LSTM(64, input_shape=(None, 18))`


{&apos;name&apos;: &apos;sequential_6&apos;, &apos;layers&apos;: [{&apos;class_name&apos;: &apos;LSTM&apos;, &apos;config&apos;: {&apos;name&apos;: &apos;lstm_4&apos;, &apos;trainable&apos;: True, &apos;batch_input_shape&apos;: (None, None, 18), &apos;dtype&apos;: &apos;float32&apos;, &apos;return_sequences&apos;: False, &apos;return_state&apos;: False, &apos;go_backwards&apos;: False, &apos;stateful&apos;: False, &apos;unroll&apos;: False, &apos;units&apos;: 64, &apos;activation&apos;: &apos;tanh&apos;, &apos;recurrent_activation&apos;: &apos;hard_sigmoid&apos;, &apos;use_bias&apos;: True, &apos;kernel_initializer&apos;: {&apos;class_name&apos;: &apos;VarianceScaling&apos;, &apos;config&apos;: {&apos;scale&apos;: 1.0, &apos;mode&apos;: &apos;fan_avg&apos;, &apos;distribution&apos;: &apos;uniform&apos;, &apos;seed&apos;: None}}, &apos;recurrent_initializer&apos;: {&apos;class_name&apos;: &apos;Orthogonal&apos;, &apos;config&apos;: {&apos;gain&apos;: 1.0, &apos;seed&apos;: None}}, &apos;bias_initializer&apos;: {&apos;class_name&apos;: &apos;Zeros&apos;, &apos;config&apos;: {}}, &apos;unit_forget_bias&apos;: True, &apos;kernel_regularizer&apos;: None, &apos;recurrent_regularizer&apos;: None, &apos;bias_regularizer&apos;: None, &apos;activity_regularizer&apos;: None, &apos;kernel_constraint&apos;: None, &apos;recurrent_constraint&apos;: None, &apos;bias_constraint&apos;: None, &apos;dropout&apos;: 0.0, &apos;recurrent_dropout&apos;: 0.0, &apos;implementation&apos;: 1}}, {&apos;class_name&apos;: &apos;Dropout&apos;, &apos;config&apos;: {&apos;name&apos;: &apos;dropout_4&apos;, &apos;trainable&apos;: True, &apos;rate&apos;: 0.1, &apos;noise_shape&apos;: None, &apos;seed&apos;: None}}, {&apos;class_name&apos;: &apos;Dense&apos;, &apos;config&apos;: {&apos;name&apos;: &apos;dense_12&apos;, &apos;trainable&apos;: True, &apos;units&apos;: 1, &apos;activation&apos;: &apos;linear&apos;, &apos;use_bias&apos;: True, &apos;kernel_initializer&apos;: {&apos;class_name&apos;: &apos;VarianceScaling&apos;, &apos;config&apos;: {&apos;scale&apos;: 1.0, &apos;mode&apos;: &apos;fan_avg&apos;, &apos;distribution&apos;: &apos;uniform&apos;, &apos;seed&apos;: None}}, &apos;bias_initializer&apos;: {&apos;class_name&apos;: &apos;Zeros&apos;, &apos;config&apos;: {}}, &apos;kernel_regularizer&apos;: None, &apos;bias_regularizer&apos;: None, &apos;activity_regularizer&apos;: None, &apos;kernel_constraint&apos;: None, &apos;bias_constraint&apos;: None}}, {&apos;class_name&apos;: &apos;Activation&apos;, &apos;config&apos;: {&apos;name&apos;: &apos;activation_6&apos;, &apos;trainable&apos;: True, &apos;activation&apos;: &apos;sigmoid&apos;}}]}


D:\anaconda3\envs\tensorflow-gpu\lib\site-packages\ipykernel_launcher.py:57: UserWarning: The `nb_epoch` argument in `fit` has been renamed `epochs`.


Epoch 1/50
 - 6s - loss: 0.6720 - acc: 0.5977
Epoch 2/50
 - 5s - loss: 0.6670 - acc: 0.6082
Epoch 3/50
 - 5s - loss: 0.6618 - acc: 0.6252
Epoch 4/50
 - 5s - loss: 0.6599 - acc: 0.6294
Epoch 5/50
 - 5s - loss: 0.6590 - acc: 0.6307
Epoch 6/50
 - 5s - loss: 0.6584 - acc: 0.6316
Epoch 7/50
 - 5s - loss: 0.6580 - acc: 0.6323
Epoch 8/50
 - 5s - loss: 0.6576 - acc: 0.6326
Epoch 9/50
 - 5s - loss: 0.6573 - acc: 0.6326
Epoch 10/50
 - 5s - loss: 0.6570 - acc: 0.6327
Epoch 11/50
 - 5s - loss: 0.6569 - acc: 0.6329
Epoch 12/50
 - 5s - loss: 0.6566 - acc: 0.6331
Epoch 13/50
 - 5s - loss: 0.6564 - acc: 0.6334
Epoch 14/50
 - 5s - loss: 0.6562 - acc: 0.6334
Epoch 15/50
 - 5s - loss: 0.6559 - acc: 0.6339
Epoch 16/50
 - 5s - loss: 0.6556 - acc: 0.6344
Epoch 17/50
 - 5s - loss: 0.6554 - acc: 0.6345
Epoch 18/50
 - 5s - loss: 0.6551 - acc: 0.6349
Epoch 19/50
 - 5s - loss: 0.6549 - acc: 0.6353
Epoch 20/50
 - 5s - loss: 0.6544 - acc: 0.6359
Epoch 21/50
 - 5s - loss: 0.6541 - acc: 0.6364
Epoch 22/50
 - 5s - loss: 0.6536 - acc: 0.6372
Epoch 23/50
 - 5s - loss: 0.6529 - acc: 0.6378
Epoch 24/50
 - 5s - loss: 0.6522 - acc: 0.6385
Epoch 25/50
 - 5s - loss: 0.6513 - acc: 0.6391
Epoch 26/50
 - 5s - loss: 0.6506 - acc: 0.6393
Epoch 27/50
 - 5s - loss: 0.6497 - acc: 0.6398
Epoch 28/50
 - 5s - loss: 0.6488 - acc: 0.6401
Epoch 29/50
 - 5s - loss: 0.6476 - acc: 0.6405
Epoch 30/50
 - 5s - loss: 0.6465 - acc: 0.6406
Epoch 31/50
 - 5s - loss: 0.6452 - acc: 0.6409
Epoch 32/50
 - 5s - loss: 0.6442 - acc: 0.6410
Epoch 33/50
 - 5s - loss: 0.6432 - acc: 0.6412
Epoch 34/50
 - 5s - loss: 0.6421 - acc: 0.6415
Epoch 35/50
 - 5s - loss: 0.6412 - acc: 0.6418
Epoch 36/50
 - 5s - loss: 0.6399 - acc: 0.6422
Epoch 37/50
 - 5s - loss: 0.6389 - acc: 0.6424
Epoch 38/50
 - 5s - loss: 0.6378 - acc: 0.6428
Epoch 39/50
 - 5s - loss: 0.6365 - acc: 0.6431
Epoch 40/50
 - 5s - loss: 0.6353 - acc: 0.6436
Epoch 41/50
 - 5s - loss: 0.6341 - acc: 0.6437
Epoch 42/50
 - 5s - loss: 0.6331 - acc: 0.6444
Epoch 43/50
 - 5s - loss: 0.6317 - acc: 0.6446
Epoch 44/50
 - 5s - loss: 0.6305 - acc: 0.6451
Epoch 45/50
 - 5s - loss: 0.6289 - acc: 0.6459
Epoch 46/50
 - 5s - loss: 0.6278 - acc: 0.6465
Epoch 47/50
 - 5s - loss: 0.6264 - acc: 0.6470
Epoch 48/50
 - 5s - loss: 0.6252 - acc: 0.6482
Epoch 49/50
 - 5s - loss: 0.6239 - acc: 0.6484
Epoch 50/50
 - 5s - loss: 0.6224 - acc: 0.6497
525618/525618 [==============================] - 19s 35us/step

Loss: 0.62, Accuracy: 64.41%</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Pandas的基本操作</title>
    <url>/2020/07/31/pandas/</url>
    <content><![CDATA[<h1 id="数据分析库Pandas"><a href="#数据分析库Pandas" class="headerlink" title="数据分析库Pandas"></a>数据分析库Pandas</h1><h2 id="1-数据预处理"><a href="#1-数据预处理" class="headerlink" title="1. 数据预处理"></a>1. 数据预处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<h3 id="1-1-数据读取"><a href="#1-1-数据读取" class="headerlink" title="1.1 数据读取"></a>1.1 数据读取</h3><p>泰坦尼克号数据<br><img src="http://ww1.sinaimg.cn/large/005PNXlEgy1gh8sfplueyj30oy0fkgn6.jpg" alt="image.png"></p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'./data/titanic.csv'</span>)</span><br><span class="line"><span class="comment">#展示数据，默认前5条</span></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss. Laina</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.9250</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认展示最后5条数据</span></span><br><span class="line">df.tail()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>886</th>
      <td>887</td>
      <td>0</td>
      <td>2</td>
      <td>Montvila, Rev. Juozas</td>
      <td>male</td>
      <td>27.0</td>
      <td>0</td>
      <td>0</td>
      <td>211536</td>
      <td>13.00</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>887</th>
      <td>888</td>
      <td>1</td>
      <td>1</td>
      <td>Graham, Miss. Margaret Edith</td>
      <td>female</td>
      <td>19.0</td>
      <td>0</td>
      <td>0</td>
      <td>112053</td>
      <td>30.00</td>
      <td>B42</td>
      <td>S</td>
    </tr>
    <tr>
      <th>888</th>
      <td>889</td>
      <td>0</td>
      <td>3</td>
      <td>Johnston, Miss. Catherine Helen "Carrie"</td>
      <td>female</td>
      <td>NaN</td>
      <td>1</td>
      <td>2</td>
      <td>W./C. 6607</td>
      <td>23.45</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>889</th>
      <td>890</td>
      <td>1</td>
      <td>1</td>
      <td>Behr, Mr. Karl Howell</td>
      <td>male</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>111369</td>
      <td>30.00</td>
      <td>C148</td>
      <td>C</td>
    </tr>
    <tr>
      <th>890</th>
      <td>891</td>
      <td>0</td>
      <td>3</td>
      <td>Dooley, Mr. Patrick</td>
      <td>male</td>
      <td>32.0</td>
      <td>0</td>
      <td>0</td>
      <td>370376</td>
      <td>7.75</td>
      <td>NaN</td>
      <td>Q</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="1-2-DataFrame结构"><a href="#1-2-DataFrame结构" class="headerlink" title="1.2 DataFrame结构"></a>1.2 DataFrame结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#DataFrame是Pandas工具包的基础结构</span></span><br><span class="line"><span class="comment">#info()查看数据基本信息</span></span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;
RangeIndex: 891 entries, 0 to 890
Data columns (total 12 columns):
PassengerId    891 non-null int64
Survived       891 non-null int64
Pclass         891 non-null int64
Name           891 non-null object
Sex            891 non-null object
Age            714 non-null float64
SibSp          891 non-null int64
Parch          891 non-null int64
Ticket         891 non-null object
Fare           891 non-null float64
Cabin          204 non-null object
Embarked       889 non-null object
dtypes: float64(2), int64(5), object(5)
memory usage: 83.6+ KB</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回索引</span></span><br><span class="line">df.index</span><br></pre></td></tr></table></figure>




<pre><code>RangeIndex(start=0, stop=891, step=1)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列出每一列特征的名字</span></span><br><span class="line">df.columns</span><br></pre></td></tr></table></figure>




<pre><code>Index([&apos;PassengerId&apos;, &apos;Survived&apos;, &apos;Pclass&apos;, &apos;Name&apos;, &apos;Sex&apos;, &apos;Age&apos;, &apos;SibSp&apos;,
       &apos;Parch&apos;, &apos;Ticket&apos;, &apos;Fare&apos;, &apos;Cabin&apos;, &apos;Embarked&apos;],
      dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回每一列特征的类型，object表示字符串</span></span><br><span class="line">df.dtypes</span><br></pre></td></tr></table></figure>




<pre><code>PassengerId      int64
Survived         int64
Pclass           int64
Name            object
Sex             object
Age            float64
SibSp            int64
Parch            int64
Ticket          object
Fare           float64
Cabin           object
Embarked        object
dtype: object</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接取得数值矩阵</span></span><br><span class="line">df.values</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 0, 3, ..., 7.25, nan, &apos;S&apos;],
       [2, 1, 1, ..., 71.2833, &apos;C85&apos;, &apos;C&apos;],
       [3, 1, 3, ..., 7.925, nan, &apos;S&apos;],
       ...,
       [889, 0, 3, ..., 23.45, nan, &apos;S&apos;],
       [890, 1, 1, ..., 30.0, &apos;C148&apos;, &apos;C&apos;],
       [891, 0, 3, ..., 7.75, nan, &apos;Q&apos;]], dtype=object)</code></pre><h3 id="1-3-数据索引"><a href="#1-3-数据索引" class="headerlink" title="1.3 数据索引"></a>1.3 数据索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = df[<span class="string">'Age'</span>]</span><br><span class="line">age[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>




<pre><code>0    22.0
1    38.0
2    26.0
3    35.0
4    35.0
Name: Age, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age.values[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([22., 38., 26., 35., 35.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Pandas读取数据默认添加数字索引，可以指定索引项</span></span><br><span class="line">data = df.set_index(<span class="string">'Name'</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
    <tr>
      <th>Name</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Braund, Mr. Owen Harris</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Cumings, Mrs. John Bradley (Florence Briggs Thayer)</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>Heikkinen, Miss. Laina</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.9250</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Futrelle, Mrs. Jacques Heath (Lily May Peel)</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Allen, Mr. William Henry</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过索引取部分数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">'./data/titanic.csv'</span>)</span><br><span class="line">df[[<span class="string">'Age'</span>,<span class="string">'Fare'</span>]][:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Age</th>
      <th>Fare</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>22.0</td>
      <td>7.2500</td>
    </tr>
    <tr>
      <th>1</th>
      <td>38.0</td>
      <td>71.2833</td>
    </tr>
    <tr>
      <th>2</th>
      <td>26.0</td>
      <td>7.9250</td>
    </tr>
    <tr>
      <th>3</th>
      <td>35.0</td>
      <td>53.1000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>35.0</td>
      <td>8.0500</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#索引用位置找一行数据.iloc[]</span></span><br><span class="line">df.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>




<pre><code>PassengerId                          1
Survived                             0
Pclass                               3
Name           Braund, Mr. Owen Harris
Sex                               male
Age                                 22
SibSp                                1
Parch                                0
Ticket                       A/5 21171
Fare                              7.25
Cabin                              NaN
Embarked                             S
Name: 0, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切片部分数据</span></span><br><span class="line">df.iloc[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss. Laina</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.9250</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定部分数据的部分特征</span></span><br><span class="line">df.iloc[:<span class="number">5</span>,<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Survived</th>
      <th>Pclass</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用标签找数据.loc[]</span></span><br><span class="line">df = df.set_index(<span class="string">'Name'</span>)</span><br><span class="line">df.loc[<span class="string">'Heikkinen, Miss. Laina'</span>]</span><br></pre></td></tr></table></figure>




<pre><code>PassengerId                   3
Survived                      1
Pclass                        3
Sex                      female
Age                          26
SibSp                         0
Parch                         0
Ticket         STON/O2. 3101282
Fare                      7.925
Cabin                       NaN
Embarked                      S
Name: Heikkinen, Miss. Laina, dtype: object</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当前数据某一列数据</span></span><br><span class="line">df.loc[<span class="string">'Heikkinen, Miss. Laina'</span>,<span class="string">'Fare'</span>]</span><br></pre></td></tr></table></figure>




<pre><code>7.925</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选择多个样本</span></span><br><span class="line">df.loc[<span class="string">'Heikkinen, Miss. Laina'</span>:<span class="string">'Allen, Mr. William Henry'</span>,:]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
    <tr>
      <th>Name</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Heikkinen, Miss. Laina</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.925</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Futrelle, Mrs. Jacques Heath (Lily May Peel)</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.100</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Allen, Mr. William Henry</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.050</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据赋值</span></span><br><span class="line">df.loc[<span class="string">'Heikkinen, Miss. Laina'</span>,<span class="string">'Fare'</span>] = <span class="number">1000</span></span><br><span class="line">df[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
    <tr>
      <th>Name</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Braund, Mr. Owen Harris</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Cumings, Mrs. John Bradley (Florence Briggs Thayer)</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>Heikkinen, Miss. Laina</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>1000.0000</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Futrelle, Mrs. Jacques Heath (Lily May Peel)</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Allen, Mr. William Henry</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bool类型作索引</span></span><br><span class="line">df[<span class="string">'Fare'</span>] &gt; <span class="number">40</span></span><br></pre></td></tr></table></figure>




<pre><code>Name
Braund, Mr. Owen Harris                                      False
Cumings, Mrs. John Bradley (Florence Briggs Thayer)           True
Heikkinen, Miss. Laina                                        True
Futrelle, Mrs. Jacques Heath (Lily May Peel)                  True
Allen, Mr. William Henry                                     False
Moran, Mr. James                                             False
McCarthy, Mr. Timothy J                                       True
Palsson, Master. Gosta Leonard                               False
Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)            False
Nasser, Mrs. Nicholas (Adele Achem)                          False
Sandstrom, Miss. Marguerite Rut                              False
Bonnell, Miss. Elizabeth                                     False
Saundercock, Mr. William Henry                               False
Andersson, Mr. Anders Johan                                  False
Vestrom, Miss. Hulda Amanda Adolfina                         False
Hewlett, Mrs. (Mary D Kingcome)                              False
Rice, Master. Eugene                                         False
Williams, Mr. Charles Eugene                                 False
Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)      False
Masselmani, Mrs. Fatima                                      False
Fynney, Mr. Joseph J                                         False
Beesley, Mr. Lawrence                                        False
McGowan, Miss. Anna &quot;Annie&quot;                                  False
Sloper, Mr. William Thompson                                 False
Palsson, Miss. Torborg Danira                                False
Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)    False
Emir, Mr. Farred Chehab                                      False
Fortune, Mr. Charles Alexander                                True
O&apos;Dwyer, Miss. Ellen &quot;Nellie&quot;                                False
Todoroff, Mr. Lalio                                          False
                                                             ...  
Giles, Mr. Frederick Edward                                  False
Swift, Mrs. Frederick Joel (Margaret Welles Barron)          False
Sage, Miss. Dorothy Edith &quot;Dolly&quot;                             True
Gill, Mr. John William                                       False
Bystrom, Mrs. (Karolina)                                     False
Duran y More, Miss. Asuncion                                 False
Roebling, Mr. Washington Augustus II                          True
van Melkebeke, Mr. Philemon                                  False
Johnson, Master. Harold Theodor                              False
Balkic, Mr. Cerin                                            False
Beckwith, Mrs. Richard Leonard (Sallie Monypeny)              True
Carlsson, Mr. Frans Olof                                     False
Vander Cruyssen, Mr. Victor                                  False
Abelson, Mrs. Samuel (Hannah Wizosky)                        False
Najib, Miss. Adele Kiamie &quot;Jane&quot;                             False
Gustafsson, Mr. Alfred Ossian                                False
Petroff, Mr. Nedelio                                         False
Laleff, Mr. Kristo                                           False
Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)                 True
Shelley, Mrs. William (Imanita Parrish Hall)                 False
Markun, Mr. Johann                                           False
Dahlberg, Miss. Gerda Ulrika                                 False
Banfield, Mr. Frederick James                                False
Sutehall, Mr. Henry Jr                                       False
Rice, Mrs. William (Margaret Norton)                         False
Montvila, Rev. Juozas                                        False
Graham, Miss. Margaret Edith                                 False
Johnston, Miss. Catherine Helen &quot;Carrie&quot;                     False
Behr, Mr. Karl Howell                                        False
Dooley, Mr. Patrick                                          False
Name: Fare, Length: 891, dtype: bool</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过bool类型筛选价格大于40的乘客</span></span><br><span class="line">df[df[<span class="string">'Fare'</span>] &gt; <span class="number">40</span>][:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
    <tr>
      <th>Name</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cumings, Mrs. John Bradley (Florence Briggs Thayer)</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>Heikkinen, Miss. Laina</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>1000.0000</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Futrelle, Mrs. Jacques Heath (Lily May Peel)</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>McCarthy, Mr. Timothy J</th>
      <td>7</td>
      <td>0</td>
      <td>1</td>
      <td>male</td>
      <td>54.0</td>
      <td>0</td>
      <td>0</td>
      <td>17463</td>
      <td>51.8625</td>
      <td>E46</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Fortune, Mr. Charles Alexander</th>
      <td>28</td>
      <td>0</td>
      <td>1</td>
      <td>male</td>
      <td>19.0</td>
      <td>3</td>
      <td>2</td>
      <td>19950</td>
      <td>263.0000</td>
      <td>C23 C25 C27</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[df[<span class="string">'Sex'</span>] == <span class="string">'male'</span>][:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
    <tr>
      <th>Name</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Braund, Mr. Owen Harris</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Allen, Mr. William Henry</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Moran, Mr. James</th>
      <td>6</td>
      <td>0</td>
      <td>3</td>
      <td>male</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>330877</td>
      <td>8.4583</td>
      <td>NaN</td>
      <td>Q</td>
    </tr>
    <tr>
      <th>McCarthy, Mr. Timothy J</th>
      <td>7</td>
      <td>0</td>
      <td>1</td>
      <td>male</td>
      <td>54.0</td>
      <td>0</td>
      <td>0</td>
      <td>17463</td>
      <td>51.8625</td>
      <td>E46</td>
      <td>S</td>
    </tr>
    <tr>
      <th>Palsson, Master. Gosta Leonard</th>
      <td>8</td>
      <td>0</td>
      <td>3</td>
      <td>male</td>
      <td>2.0</td>
      <td>3</td>
      <td>1</td>
      <td>349909</td>
      <td>21.0750</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算男性乘客的平均年龄</span></span><br><span class="line">df.loc[df[<span class="string">'Sex'</span>] == <span class="string">'male'</span>, <span class="string">'Age'</span>].mean()</span><br></pre></td></tr></table></figure>




<pre><code>30.72664459161148</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算年龄大于70的人的总数</span></span><br><span class="line">(df[<span class="string">'Age'</span>] &gt; <span class="number">70</span>).sum()</span><br></pre></td></tr></table></figure>




<pre><code>5</code></pre><h3 id="1-4-创建DataFrame"><a href="#1-4-创建DataFrame" class="headerlink" title="1.4 创建DataFrame"></a>1.4 创建DataFrame</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">'country'</span>:[<span class="string">'China'</span>,<span class="string">'America'</span>,<span class="string">'India'</span>],</span><br><span class="line">       <span class="string">'population'</span>:[<span class="number">3</span>, <span class="number">14</span>, <span class="number">6</span>]&#125;</span><br><span class="line">data_df = pd.DataFrame(data)</span><br><span class="line">data_df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>country</th>
      <th>population</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>China</td>
      <td>3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>America</td>
      <td>14</td>
    </tr>
    <tr>
      <th>2</th>
      <td>India</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="1-5-Series操作"><a href="#1-5-Series操作" class="headerlink" title="1.5 Series操作"></a>1.5 Series操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#DataFrame和Series都可以看作是二维矩阵，单独的一列就是Series，DataFrame由Series组合</span></span><br><span class="line"><span class="comment">#创建Series</span></span><br><span class="line">data = [<span class="number">11</span>,<span class="number">45</span>,<span class="number">21</span>]</span><br><span class="line">index = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">s = pd.Series(data = data, index = index)</span><br><span class="line">s</span><br></pre></td></tr></table></figure>




<pre><code>a    11
b    45
c    21
dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#标签查找</span></span><br><span class="line">s.loc[<span class="string">'b'</span>]</span><br></pre></td></tr></table></figure>




<pre><code>45</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#索引查找</span></span><br><span class="line">s.iloc[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>45</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改操作</span></span><br><span class="line">s1 = s.copy()</span><br><span class="line">s1.loc[<span class="string">'a'</span>] = <span class="number">100</span></span><br><span class="line">s1</span><br></pre></td></tr></table></figure>




<pre><code>a    100
b     45
c     21
dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.replace(<span class="number">100</span>,<span class="number">101</span>,inplace = <span class="literal">True</span>)</span><br><span class="line">s1</span><br></pre></td></tr></table></figure>




<pre><code>a    101
b     45
c     21
dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改索引</span></span><br><span class="line">s1.index</span><br></pre></td></tr></table></figure>




<pre><code>Index([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1.index = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'z'</span>]</span><br><span class="line">s1.index</span><br></pre></td></tr></table></figure>




<pre><code>Index([&apos;a&apos;, &apos;b&apos;, &apos;z&apos;], dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#索引重命名</span></span><br><span class="line">s1.rename(index = &#123;<span class="string">'a'</span>:<span class="string">'A'</span>&#125;,inplace = <span class="literal">True</span>)</span><br><span class="line">s1.index</span><br></pre></td></tr></table></figure>




<pre><code>Index([&apos;A&apos;, &apos;b&apos;, &apos;z&apos;], dtype=&apos;object&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">100</span>,<span class="number">101</span>]</span><br><span class="line">index = [<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">s2 = pd.Series(data,index,)</span><br><span class="line">s3 = s1.append(s2)</span><br><span class="line">s3</span><br></pre></td></tr></table></figure>




<pre><code>A    101
b     45
z     21
e    100
f    101
dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s3[<span class="string">'f'</span>] = <span class="number">500</span></span><br><span class="line">s3</span><br></pre></td></tr></table></figure>




<pre><code>A    101
b     45
z     21
e    100
f    500
dtype: int64</code></pre><h2 id="2-数据分析"><a href="#2-数据分析" class="headerlink" title="2. 数据分析"></a>2. 数据分析</h2><h3 id="2-1-统计分析"><a href="#2-1-统计分析" class="headerlink" title="2.1 统计分析"></a>2.1 统计分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建DataFrame</span></span><br><span class="line">df = pd.DataFrame([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]],index = [<span class="string">'a'</span>, <span class="string">'b'</span>], columns = [<span class="string">'A'</span>,<span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>a</th>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
    <tr>
      <th>b</th>
      <td>4</td>
      <td>5</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sum()</span><br></pre></td></tr></table></figure>




<pre><code>A    5
B    7
C    9
dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sum(axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>a     6
b    15
dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#快捷观察样本的情况</span></span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>714.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>446.000000</td>
      <td>0.383838</td>
      <td>2.308642</td>
      <td>29.699118</td>
      <td>0.523008</td>
      <td>0.381594</td>
      <td>32.204208</td>
    </tr>
    <tr>
      <th>std</th>
      <td>257.353842</td>
      <td>0.486592</td>
      <td>0.836071</td>
      <td>14.526497</td>
      <td>1.102743</td>
      <td>0.806057</td>
      <td>49.693429</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000</td>
      <td>0.000000</td>
      <td>1.000000</td>
      <td>0.420000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>223.500000</td>
      <td>0.000000</td>
      <td>2.000000</td>
      <td>20.125000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>7.910400</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>446.000000</td>
      <td>0.000000</td>
      <td>3.000000</td>
      <td>28.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>14.454200</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>668.500000</td>
      <td>1.000000</td>
      <td>3.000000</td>
      <td>38.000000</td>
      <td>1.000000</td>
      <td>0.000000</td>
      <td>31.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>891.000000</td>
      <td>1.000000</td>
      <td>3.000000</td>
      <td>80.000000</td>
      <td>8.000000</td>
      <td>6.000000</td>
      <td>512.329200</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#协方差矩阵</span></span><br><span class="line">df.cov()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>PassengerId</th>
      <td>66231.000000</td>
      <td>-0.626966</td>
      <td>-7.561798</td>
      <td>138.696504</td>
      <td>-16.325843</td>
      <td>-0.342697</td>
      <td>161.883369</td>
    </tr>
    <tr>
      <th>Survived</th>
      <td>-0.626966</td>
      <td>0.236772</td>
      <td>-0.137703</td>
      <td>-0.551296</td>
      <td>-0.018954</td>
      <td>0.032017</td>
      <td>6.221787</td>
    </tr>
    <tr>
      <th>Pclass</th>
      <td>-7.561798</td>
      <td>-0.137703</td>
      <td>0.699015</td>
      <td>-4.496004</td>
      <td>0.076599</td>
      <td>0.012429</td>
      <td>-22.830196</td>
    </tr>
    <tr>
      <th>Age</th>
      <td>138.696504</td>
      <td>-0.551296</td>
      <td>-4.496004</td>
      <td>211.019125</td>
      <td>-4.163334</td>
      <td>-2.344191</td>
      <td>73.849030</td>
    </tr>
    <tr>
      <th>SibSp</th>
      <td>-16.325843</td>
      <td>-0.018954</td>
      <td>0.076599</td>
      <td>-4.163334</td>
      <td>1.216043</td>
      <td>0.368739</td>
      <td>8.748734</td>
    </tr>
    <tr>
      <th>Parch</th>
      <td>-0.342697</td>
      <td>0.032017</td>
      <td>0.012429</td>
      <td>-2.344191</td>
      <td>0.368739</td>
      <td>0.649728</td>
      <td>8.661052</td>
    </tr>
    <tr>
      <th>Fare</th>
      <td>161.883369</td>
      <td>6.221787</td>
      <td>-22.830196</td>
      <td>73.849030</td>
      <td>8.748734</td>
      <td>8.661052</td>
      <td>2469.436846</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#相关系数</span></span><br><span class="line">df.corr()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Fare</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>PassengerId</th>
      <td>1.000000</td>
      <td>-0.005007</td>
      <td>-0.035144</td>
      <td>0.036847</td>
      <td>-0.057527</td>
      <td>-0.001652</td>
      <td>0.012658</td>
    </tr>
    <tr>
      <th>Survived</th>
      <td>-0.005007</td>
      <td>1.000000</td>
      <td>-0.338481</td>
      <td>-0.077221</td>
      <td>-0.035322</td>
      <td>0.081629</td>
      <td>0.257307</td>
    </tr>
    <tr>
      <th>Pclass</th>
      <td>-0.035144</td>
      <td>-0.338481</td>
      <td>1.000000</td>
      <td>-0.369226</td>
      <td>0.083081</td>
      <td>0.018443</td>
      <td>-0.549500</td>
    </tr>
    <tr>
      <th>Age</th>
      <td>0.036847</td>
      <td>-0.077221</td>
      <td>-0.369226</td>
      <td>1.000000</td>
      <td>-0.308247</td>
      <td>-0.189119</td>
      <td>0.096067</td>
    </tr>
    <tr>
      <th>SibSp</th>
      <td>-0.057527</td>
      <td>-0.035322</td>
      <td>0.083081</td>
      <td>-0.308247</td>
      <td>1.000000</td>
      <td>0.414838</td>
      <td>0.159651</td>
    </tr>
    <tr>
      <th>Parch</th>
      <td>-0.001652</td>
      <td>0.081629</td>
      <td>0.018443</td>
      <td>-0.189119</td>
      <td>0.414838</td>
      <td>1.000000</td>
      <td>0.216225</td>
    </tr>
    <tr>
      <th>Fare</th>
      <td>0.012658</td>
      <td>0.257307</td>
      <td>-0.549500</td>
      <td>0.096067</td>
      <td>0.159651</td>
      <td>0.216225</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#统计该列所有属性的个数(离散值)</span></span><br><span class="line">df[<span class="string">'Sex'</span>].value_counts()</span><br></pre></td></tr></table></figure>




<pre><code>male      577
female    314
Name: Sex, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对于连续值可以划分区间统计,bins的值代表分为几组</span></span><br><span class="line">df[<span class="string">'Age'</span>].value_counts(ascending = <span class="literal">True</span>, bins = <span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(64.084, 80.0]       11
(48.168, 64.084]     69
(0.339, 16.336]     100
(32.252, 48.168]    188
(16.336, 32.252]    346
Name: Age, dtype: int64</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#分箱操作</span></span><br><span class="line">ages = [<span class="number">15</span>,<span class="number">18</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">34</span>,<span class="number">41</span>,<span class="number">52</span>,<span class="number">63</span>,<span class="number">79</span>]</span><br><span class="line">bins = [<span class="number">10</span>,<span class="number">40</span>,<span class="number">80</span>]</span><br><span class="line">bins_res = pd.cut(ages,bins)</span><br><span class="line">bins_res</span><br></pre></td></tr></table></figure>




<pre><code>[(10, 40], (10, 40], (10, 40], (10, 40], (10, 40], (10, 40], (40, 80], (40, 80], (40, 80], (40, 80]]
Categories (2, interval[int64]): [(10, 40] &lt; (40, 80]]</code></pre><h3 id="2-3-groupby操作"><a href="#2-3-groupby操作" class="headerlink" title="2.3 groupby操作"></a>2.3 groupby操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>],<span class="string">'data'</span>:[<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>]&#125;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key</th>
      <th>data</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>A</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>B</td>
      <td>5</td>
    </tr>
    <tr>
      <th>2</th>
      <td>C</td>
      <td>10</td>
    </tr>
    <tr>
      <th>3</th>
      <td>A</td>
      <td>5</td>
    </tr>
    <tr>
      <th>4</th>
      <td>B</td>
      <td>10</td>
    </tr>
    <tr>
      <th>5</th>
      <td>C</td>
      <td>15</td>
    </tr>
    <tr>
      <th>6</th>
      <td>A</td>
      <td>10</td>
    </tr>
    <tr>
      <th>7</th>
      <td>B</td>
      <td>15</td>
    </tr>
    <tr>
      <th>8</th>
      <td>C</td>
      <td>20</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计算各key对应的值的和</span></span><br><span class="line">df.groupby(<span class="string">'key'</span>).sum()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>data</th>
    </tr>
    <tr>
      <th>key</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>A</th>
      <td>15</td>
    </tr>
    <tr>
      <th>B</th>
      <td>30</td>
    </tr>
    <tr>
      <th>C</th>
      <td>45</td>
    </tr>
  </tbody>
</table>
</div>



<h2 id="3-常用函数操作"><a href="#3-常用函数操作" class="headerlink" title="3. 常用函数操作"></a>3. 常用函数操作</h2><h3 id="3-1-Merge操作"><a href="#3-1-Merge操作" class="headerlink" title="3.1 Merge操作"></a>3.1 Merge操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">left = pd.DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>,<span class="string">'K3'</span>],</span><br><span class="line">                   <span class="string">'A'</span>:[<span class="string">'A0'</span>,<span class="string">'A1'</span>,<span class="string">'A2'</span>,<span class="string">'A3'</span>],</span><br><span class="line">                   <span class="string">'B'</span>:[<span class="string">'B0'</span>,<span class="string">'B1'</span>,<span class="string">'B2'</span>,<span class="string">'B3'</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">'key'</span>:[<span class="string">'K0'</span>,<span class="string">'K1'</span>,<span class="string">'K2'</span>,<span class="string">'K3'</span>],</span><br><span class="line">                    <span class="string">'C'</span>:[<span class="string">'C0'</span>,<span class="string">'C1'</span>,<span class="string">'C2'</span>,<span class="string">'C3'</span>],</span><br><span class="line">                    <span class="string">'D'</span>:[<span class="string">'D0'</span>,<span class="string">'D1'</span>,<span class="string">'D2'</span>,<span class="string">'D3'</span>]&#125;)</span><br><span class="line">pd.merge(left,right,on = <span class="string">'key'</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>key</th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>K0</td>
      <td>A0</td>
      <td>B0</td>
      <td>C0</td>
      <td>D0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>K1</td>
      <td>A1</td>
      <td>B1</td>
      <td>C1</td>
      <td>D1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>K2</td>
      <td>A2</td>
      <td>B2</td>
      <td>C2</td>
      <td>D2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>K3</td>
      <td>A3</td>
      <td>B3</td>
      <td>C3</td>
      <td>D3</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="3-1-排序操作"><a href="#3-1-排序操作" class="headerlink" title="3.1 排序操作"></a>3.1 排序操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data  = pd.DataFrame(&#123;<span class="string">'group'</span>:[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'c'</span>,<span class="string">'c'</span>],</span><br><span class="line">                     <span class="string">'data'</span>:[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>]&#125;)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>group</th>
      <th>data</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>a</td>
      <td>4</td>
    </tr>
    <tr>
      <th>1</th>
      <td>a</td>
      <td>3</td>
    </tr>
    <tr>
      <th>2</th>
      <td>a</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>b</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>b</td>
      <td>12</td>
    </tr>
    <tr>
      <th>5</th>
      <td>b</td>
      <td>3</td>
    </tr>
    <tr>
      <th>6</th>
      <td>c</td>
      <td>4</td>
    </tr>
    <tr>
      <th>7</th>
      <td>c</td>
      <td>5</td>
    </tr>
    <tr>
      <th>8</th>
      <td>c</td>
      <td>7</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.sort_values(by = [<span class="string">'group'</span>,<span class="string">'data'</span>],ascending = [<span class="literal">True</span>,<span class="literal">False</span>],inplace=<span class="literal">True</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>group</th>
      <th>data</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>a</td>
      <td>4</td>
    </tr>
    <tr>
      <th>1</th>
      <td>a</td>
      <td>3</td>
    </tr>
    <tr>
      <th>2</th>
      <td>a</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>b</td>
      <td>12</td>
    </tr>
    <tr>
      <th>5</th>
      <td>b</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>b</td>
      <td>1</td>
    </tr>
    <tr>
      <th>8</th>
      <td>c</td>
      <td>7</td>
    </tr>
    <tr>
      <th>7</th>
      <td>c</td>
      <td>5</td>
    </tr>
    <tr>
      <th>6</th>
      <td>c</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="3-3-缺失值处理"><a href="#3-3-缺失值处理" class="headerlink" title="3.3 缺失值处理"></a>3.3 缺失值处理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.DataFrame(&#123;<span class="string">'k1'</span>:[<span class="string">'one'</span>] *<span class="number">3</span> + [<span class="string">'two'</span>]* <span class="number">4</span>,</span><br><span class="line">                    <span class="string">'k2'</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]&#125;)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>k1</th>
      <th>k2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>one</td>
      <td>3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>one</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>one</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>two</td>
      <td>3</td>
    </tr>
    <tr>
      <th>4</th>
      <td>two</td>
      <td>3</td>
    </tr>
    <tr>
      <th>5</th>
      <td>two</td>
      <td>4</td>
    </tr>
    <tr>
      <th>6</th>
      <td>two</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#去掉冗余相同数据drop_duplicates()</span></span><br><span class="line">res =  data.drop_duplicates()</span><br><span class="line">res</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>k1</th>
      <th>k2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>one</td>
      <td>3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>one</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>one</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>two</td>
      <td>3</td>
    </tr>
    <tr>
      <th>5</th>
      <td>two</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只考虑某些列的冗余数据处理</span></span><br><span class="line">res1 = data.drop_duplicates(subset=<span class="string">'k1'</span>)</span><br><span class="line">res1</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>k1</th>
      <th>k2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>one</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>two</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加新列assign()</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'data1'</span>:np.random.randn(<span class="number">5</span>),<span class="string">'data2'</span>:np.random.randn(<span class="number">5</span>)&#125;)</span><br><span class="line">df2 = df.assign(ration = df[<span class="string">'data1'</span>]/df[<span class="string">'data2'</span>])</span><br><span class="line">df2</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>data1</th>
      <th>data2</th>
      <th>ration</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.795552</td>
      <td>1.063400</td>
      <td>0.748121</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.516393</td>
      <td>1.453561</td>
      <td>1.043226</td>
    </tr>
    <tr>
      <th>2</th>
      <td>-1.043458</td>
      <td>-0.210488</td>
      <td>4.957335</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.112729</td>
      <td>1.536009</td>
      <td>0.724429</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.302984</td>
      <td>-1.075604</td>
      <td>-0.281687</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame([range(<span class="number">3</span>),[<span class="number">0</span>,np.nan,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,np.nan],range(<span class="number">3</span>)])</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>1.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>NaN</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>0.0</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>1.0</td>
      <td>2.0</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过isnull判断是否存在缺失值</span></span><br><span class="line">df.isnull()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1</th>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <th>2</th>
      <td>False</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <th>3</th>
      <td>False</td>
      <td>False</td>
      <td>False</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接判断某列是否存在缺失值</span></span><br><span class="line">df.isnull().any()</span><br></pre></td></tr></table></figure>




<pre><code>0    False
1     True
2     True
dtype: bool</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定维度检查缺失值</span></span><br><span class="line">df.isnull().any(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0    False
1     True
2     True
3    False
dtype: bool</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#缺失值填充</span></span><br><span class="line">df.fillna(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>1.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0</td>
      <td>5.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0</td>
      <td>0.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0</td>
      <td>1.0</td>
      <td>2.0</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="3-4-apply自定义函数"><a href="#3-4-apply自定义函数" class="headerlink" title="3.4 apply自定义函数"></a>3.4 apply自定义函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.DataFrame(&#123;<span class="string">'food'</span>:[<span class="string">'A1'</span>,<span class="string">'A2'</span>,<span class="string">'B1'</span>,<span class="string">'B2'</span>,<span class="string">'B3'</span>,<span class="string">'C1'</span>,<span class="string">'C2'</span>],</span><br><span class="line">                    <span class="string">'data'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]&#125;)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>food</th>
      <th>data</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>A1</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>A2</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>B1</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>B2</td>
      <td>4</td>
    </tr>
    <tr>
      <th>4</th>
      <td>B3</td>
      <td>5</td>
    </tr>
    <tr>
      <th>5</th>
      <td>C1</td>
      <td>6</td>
    </tr>
    <tr>
      <th>6</th>
      <td>C2</td>
      <td>7</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">food_map</span><span class="params">(series)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> series[<span class="string">'food'</span>] == <span class="string">'A1'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">elif</span> series[<span class="string">'food'</span>] == <span class="string">'A2'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">elif</span> series[<span class="string">'food'</span>] == <span class="string">'B1'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">elif</span> series[<span class="string">'food'</span>] == <span class="string">'B2'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">elif</span> series[<span class="string">'food'</span>] == <span class="string">'B3'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line">    <span class="keyword">elif</span> series[<span class="string">'food'</span>] == <span class="string">'C1'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'C'</span></span><br><span class="line">    <span class="keyword">elif</span> series[<span class="string">'food'</span>] == <span class="string">'C2'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'C'</span> </span><br><span class="line">data[<span class="string">'food_map'</span>] = data.apply(food_map,axis = <span class="string">'columns'</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>food</th>
      <th>data</th>
      <th>food_map</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>A1</td>
      <td>1</td>
      <td>A</td>
    </tr>
    <tr>
      <th>1</th>
      <td>A2</td>
      <td>2</td>
      <td>A</td>
    </tr>
    <tr>
      <th>2</th>
      <td>B1</td>
      <td>3</td>
      <td>B</td>
    </tr>
    <tr>
      <th>3</th>
      <td>B2</td>
      <td>4</td>
      <td>B</td>
    </tr>
    <tr>
      <th>4</th>
      <td>B3</td>
      <td>5</td>
      <td>B</td>
    </tr>
    <tr>
      <th>5</th>
      <td>C1</td>
      <td>6</td>
      <td>C</td>
    </tr>
    <tr>
      <th>6</th>
      <td>C2</td>
      <td>7</td>
      <td>C</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="3-5-时间操作"><a href="#3-5-时间操作" class="headerlink" title="3.5 时间操作"></a>3.5 时间操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取数据时以时间为索引</span></span><br><span class="line">data = pd.read_csv(<span class="string">'./data/flowdata.csv'</span>,index_col = <span class="number">0</span>,parse_dates = <span class="literal">True</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>L06_347</th>
      <th>LS06_347</th>
      <th>LS06_348</th>
    </tr>
    <tr>
      <th>Time</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2009-01-01 00:00:00</th>
      <td>0.137417</td>
      <td>0.097500</td>
      <td>0.016833</td>
    </tr>
    <tr>
      <th>2009-01-01 03:00:00</th>
      <td>0.131250</td>
      <td>0.088833</td>
      <td>0.016417</td>
    </tr>
    <tr>
      <th>2009-01-01 06:00:00</th>
      <td>0.113500</td>
      <td>0.091250</td>
      <td>0.016750</td>
    </tr>
    <tr>
      <th>2009-01-01 09:00:00</th>
      <td>0.135750</td>
      <td>0.091500</td>
      <td>0.016250</td>
    </tr>
    <tr>
      <th>2009-01-01 12:00:00</th>
      <td>0.140917</td>
      <td>0.096167</td>
      <td>0.017000</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取某一年的数据</span></span><br><span class="line">data[<span class="string">'2013'</span>]</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>L06_347</th>
      <th>LS06_347</th>
      <th>LS06_348</th>
    </tr>
    <tr>
      <th>Time</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2013-01-01 00:00:00</th>
      <td>1.688333</td>
      <td>1.688333</td>
      <td>0.207333</td>
    </tr>
    <tr>
      <th>2013-01-01 03:00:00</th>
      <td>2.693333</td>
      <td>2.693333</td>
      <td>0.201500</td>
    </tr>
    <tr>
      <th>2013-01-01 06:00:00</th>
      <td>2.220833</td>
      <td>2.220833</td>
      <td>0.166917</td>
    </tr>
    <tr>
      <th>2013-01-01 09:00:00</th>
      <td>2.055000</td>
      <td>2.055000</td>
      <td>0.175667</td>
    </tr>
    <tr>
      <th>2013-01-01 12:00:00</th>
      <td>1.710000</td>
      <td>1.710000</td>
      <td>0.129583</td>
    </tr>
    <tr>
      <th>2013-01-01 15:00:00</th>
      <td>1.420000</td>
      <td>1.420000</td>
      <td>0.096333</td>
    </tr>
    <tr>
      <th>2013-01-01 18:00:00</th>
      <td>1.178583</td>
      <td>1.178583</td>
      <td>0.083083</td>
    </tr>
    <tr>
      <th>2013-01-01 21:00:00</th>
      <td>0.898250</td>
      <td>0.898250</td>
      <td>0.077167</td>
    </tr>
    <tr>
      <th>2013-01-02 00:00:00</th>
      <td>0.860000</td>
      <td>0.860000</td>
      <td>0.075000</td>
    </tr>
  </tbody>
</table>
</div>



<h3 id="3-6-绘图操作"><a href="#3-6-绘图操作" class="headerlink" title="3.6 绘图操作"></a>3.6 绘图操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pandas简单绘图操作</span></span><br><span class="line">%matplotlib inline</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">10</span>,<span class="number">4</span>).cumsum(<span class="number">0</span>),index = np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>),</span><br><span class="line">                  columns = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>])</span><br><span class="line">df.plot()</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1dbf30fb860&gt;</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#指定子图两行一列</span></span><br><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">data = pd.Series(np.random.rand(<span class="number">16</span>),index = list(<span class="string">'abcdefghijklmnop'</span>))</span><br><span class="line">data.plot(ax = axes[<span class="number">0</span>],kind = <span class="string">'bar'</span>)</span><br><span class="line">data.plot(ax = axes[<span class="number">1</span>],kind = <span class="string">'barh'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1dbf37e0080&gt;</code></pre><p><img src="/2020/07/31/pandas/output_81_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">6</span>,<span class="number">4</span>),index = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>,<span class="string">'five'</span>,<span class="string">'six'</span>],</span><br><span class="line">                 columns = pd.Index([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>], name = <span class="string">'Genus'</span>))</span><br><span class="line">df</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>Genus</th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>one</th>
      <td>0.825736</td>
      <td>0.816818</td>
      <td>0.836805</td>
      <td>0.288769</td>
    </tr>
    <tr>
      <th>two</th>
      <td>0.568115</td>
      <td>0.108279</td>
      <td>0.188345</td>
      <td>0.343175</td>
    </tr>
    <tr>
      <th>three</th>
      <td>0.669199</td>
      <td>0.137701</td>
      <td>0.567066</td>
      <td>0.813652</td>
    </tr>
    <tr>
      <th>four</th>
      <td>0.961713</td>
      <td>0.971082</td>
      <td>0.319790</td>
      <td>0.780224</td>
    </tr>
    <tr>
      <th>five</th>
      <td>0.196340</td>
      <td>0.901948</td>
      <td>0.684793</td>
      <td>0.644339</td>
    </tr>
    <tr>
      <th>six</th>
      <td>0.249157</td>
      <td>0.321956</td>
      <td>0.110594</td>
      <td>0.574358</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.plot(kind = <span class="string">'bar'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1dbf35d4cf8&gt;</code></pre><p><img src="/2020/07/31/pandas/output_83_1.png" alt="png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">'./data/macrodata.csv'</span>)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure>




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>quarter</th>
      <th>realgdp</th>
      <th>realcons</th>
      <th>realinv</th>
      <th>realgovt</th>
      <th>realdpi</th>
      <th>cpi</th>
      <th>m1</th>
      <th>tbilrate</th>
      <th>unemp</th>
      <th>pop</th>
      <th>infl</th>
      <th>realint</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1959.0</td>
      <td>1.0</td>
      <td>2710.349</td>
      <td>1707.4</td>
      <td>286.898</td>
      <td>470.045</td>
      <td>1886.9</td>
      <td>28.98</td>
      <td>139.7</td>
      <td>2.82</td>
      <td>5.8</td>
      <td>177.146</td>
      <td>0.00</td>
      <td>0.00</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1959.0</td>
      <td>2.0</td>
      <td>2778.801</td>
      <td>1733.7</td>
      <td>310.859</td>
      <td>481.301</td>
      <td>1919.7</td>
      <td>29.15</td>
      <td>141.7</td>
      <td>3.08</td>
      <td>5.1</td>
      <td>177.830</td>
      <td>2.34</td>
      <td>0.74</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1959.0</td>
      <td>3.0</td>
      <td>2775.488</td>
      <td>1751.8</td>
      <td>289.226</td>
      <td>491.260</td>
      <td>1916.4</td>
      <td>29.35</td>
      <td>140.5</td>
      <td>3.82</td>
      <td>5.3</td>
      <td>178.657</td>
      <td>2.74</td>
      <td>1.09</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1959.0</td>
      <td>4.0</td>
      <td>2785.204</td>
      <td>1753.7</td>
      <td>299.356</td>
      <td>484.052</td>
      <td>1931.3</td>
      <td>29.37</td>
      <td>140.0</td>
      <td>4.33</td>
      <td>5.6</td>
      <td>179.386</td>
      <td>0.27</td>
      <td>4.06</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1960.0</td>
      <td>1.0</td>
      <td>2847.699</td>
      <td>1770.5</td>
      <td>331.722</td>
      <td>462.199</td>
      <td>1955.5</td>
      <td>29.54</td>
      <td>139.6</td>
      <td>3.50</td>
      <td>5.2</td>
      <td>180.007</td>
      <td>2.31</td>
      <td>1.19</td>
    </tr>
  </tbody>
</table>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.plot.scatter(<span class="string">'quarter'</span>,<span class="string">'realgdp'</span>)</span><br></pre></td></tr></table></figure>




<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1dbf39df198&gt;</code></pre><p><img src="/2020/07/31/pandas/output_85_1.png" alt="png"></p>
<h2 id="4-大数据处理技巧"><a href="#4-大数据处理技巧" class="headerlink" title="4. 大数据处理技巧"></a>4. 大数据处理技巧</h2><h3 id="4-1-数值类型转换"><a href="#4-1-数值类型转换" class="headerlink" title="4.1 数值类型转换"></a>4.1 数值类型转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gl = pd.read_csv(<span class="string">'./data/game_logs.csv'</span>)</span><br><span class="line">gl.head()</span><br></pre></td></tr></table></figure>

<pre><code>D:\anaconda3\lib\site-packages\IPython\core\interactiveshell.py:3049: DtypeWarning: Columns (12,13,14,15,19,20,81,83,85,87,93,94,95,96,97,98,99,100,105,106,108,109,111,112,114,115,117,118,120,121,123,124,126,127,129,130,132,133,135,136,138,139,141,142,144,145,147,148,150,151,153,154,156,157,160) have mixed types. Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)</code></pre><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}</code></pre><p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>number_of_game</th>
      <th>day_of_week</th>
      <th>v_name</th>
      <th>v_league</th>
      <th>v_game_number</th>
      <th>h_name</th>
      <th>h_league</th>
      <th>h_game_number</th>
      <th>v_score</th>
      <th>...</th>
      <th>h_player_7_name</th>
      <th>h_player_7_def_pos</th>
      <th>h_player_8_id</th>
      <th>h_player_8_name</th>
      <th>h_player_8_def_pos</th>
      <th>h_player_9_id</th>
      <th>h_player_9_name</th>
      <th>h_player_9_def_pos</th>
      <th>additional_info</th>
      <th>acquisition_info</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>18710504</td>
      <td>0</td>
      <td>Thu</td>
      <td>CL1</td>
      <td>na</td>
      <td>1</td>
      <td>FW1</td>
      <td>na</td>
      <td>1</td>
      <td>0</td>
      <td>...</td>
      <td>Ed Mincher</td>
      <td>7.0</td>
      <td>mcdej101</td>
      <td>James McDermott</td>
      <td>8.0</td>
      <td>kellb105</td>
      <td>Bill Kelly</td>
      <td>9.0</td>
      <td>NaN</td>
      <td>Y</td>
    </tr>
    <tr>
      <th>1</th>
      <td>18710505</td>
      <td>0</td>
      <td>Fri</td>
      <td>BS1</td>
      <td>na</td>
      <td>1</td>
      <td>WS3</td>
      <td>na</td>
      <td>1</td>
      <td>20</td>
      <td>...</td>
      <td>Asa Brainard</td>
      <td>1.0</td>
      <td>burrh101</td>
      <td>Henry Burroughs</td>
      <td>9.0</td>
      <td>berth101</td>
      <td>Henry Berthrong</td>
      <td>8.0</td>
      <td>HTBF</td>
      <td>Y</td>
    </tr>
    <tr>
      <th>2</th>
      <td>18710506</td>
      <td>0</td>
      <td>Sat</td>
      <td>CL1</td>
      <td>na</td>
      <td>2</td>
      <td>RC1</td>
      <td>na</td>
      <td>1</td>
      <td>12</td>
      <td>...</td>
      <td>Pony Sager</td>
      <td>6.0</td>
      <td>birdg101</td>
      <td>George Bird</td>
      <td>7.0</td>
      <td>stirg101</td>
      <td>Gat Stires</td>
      <td>9.0</td>
      <td>NaN</td>
      <td>Y</td>
    </tr>
    <tr>
      <th>3</th>
      <td>18710508</td>
      <td>0</td>
      <td>Mon</td>
      <td>CL1</td>
      <td>na</td>
      <td>3</td>
      <td>CH1</td>
      <td>na</td>
      <td>1</td>
      <td>12</td>
      <td>...</td>
      <td>Ed Duffy</td>
      <td>6.0</td>
      <td>pinke101</td>
      <td>Ed Pinkham</td>
      <td>5.0</td>
      <td>zettg101</td>
      <td>George Zettlein</td>
      <td>1.0</td>
      <td>NaN</td>
      <td>Y</td>
    </tr>
    <tr>
      <th>4</th>
      <td>18710509</td>
      <td>0</td>
      <td>Tue</td>
      <td>BS1</td>
      <td>na</td>
      <td>2</td>
      <td>TRO</td>
      <td>na</td>
      <td>1</td>
      <td>9</td>
      <td>...</td>
      <td>Steve Bellan</td>
      <td>5.0</td>
      <td>pikel101</td>
      <td>Lip Pike</td>
      <td>3.0</td>
      <td>cravb101</td>
      <td>Bill Craver</td>
      <td>6.0</td>
      <td>HTBF</td>
      <td>Y</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 161 columns</p>
</div>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gl.shape</span><br></pre></td></tr></table></figure>




<pre><code>(171907, 161)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以将数值类型向下转换减少内存占用</span></span><br><span class="line">gl.info(memory_usage = <span class="string">'deep'</span>)</span><br></pre></td></tr></table></figure>

<pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;
RangeIndex: 171907 entries, 0 to 171906
Columns: 161 entries, date to acquisition_info
dtypes: float64(77), int64(6), object(78)
memory usage: 860.5 MB</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Pandas</category>
      </categories>
      <tags>
        <tag>Pandas</tag>
      </tags>
  </entry>
</search>
