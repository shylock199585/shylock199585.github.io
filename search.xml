<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建简要过程</title>
    <url>/2020/07/05/hexo%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><p><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a><br><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a></p>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h4><p>安装 Hexo 完成后，执行下列命令，在指定文件夹中新建所需要的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt; <span class="comment"># 初始化项目名称 </span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt; </span><br><span class="line">$ npm install <span class="comment"># 安装模块</span></span><br></pre></td></tr></table></figure>

<h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean <span class="comment"># 必要时，清除上次生成页面时造成的缓存 </span></span><br><span class="line">$ hexo g  <span class="comment"># 生成静态页面 </span></span><br><span class="line">$ hexo s  <span class="comment"># 在本地启动Hexo，可以在浏览器访问 localhost:4000 来预览</span></span><br></pre></td></tr></table></figure>

<h4 id="GitHub-支持"><a href="#GitHub-支持" class="headerlink" title="GitHub 支持"></a>GitHub 支持</h4><p>在 GitHub 按照 <code>username.github.io</code> 格式新建仓库，然后在项目根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>打开 <code>_config.yml</code> ，编辑 <code>deploy</code>字段，注意替换用户名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourusername&#x2F;yourusername.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>配置完成后，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>将本地内容部署在 GitHub 中，输入域名 <code>username.github.io</code> 进行访问</p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><blockquote>
<p>如果不喜欢默认主题，可以参考如下方式更改。</p>
</blockquote>
<p>要把主题更换为Next，先定位到Hexo站点目录进行主题下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>打开站点配置文件 <code>_config.yml</code>，修改 <code>theme</code> 字段值为 <code>next</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h4 id="修改Scheme"><a href="#修改Scheme" class="headerlink" title="修改Scheme"></a>修改Scheme</h4><p>在主题配置文件 <code>themes/next/_config.yml</code> 中进行修改，通过注释和反注释三选一。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br></pre></td></tr></table></figure>
<h4 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h4><p>在主题配置文件中，找到 <code>menu</code> 字段并进行适当修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;</span><br><span class="line">  archives: &#x2F;archives &#x2F;&#x2F;归档</span><br><span class="line">  about: &#x2F;about</span><br><span class="line">  categories: &#x2F;categories  &#x2F;&#x2F;分类</span><br><span class="line">  tags: &#x2F;tags   &#x2F;&#x2F;标签</span><br><span class="line">  #commonweal: &#x2F;404.html</span><br></pre></td></tr></table></figure>
<h4 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h4><p>在主题配置文件中修改 <code>avatar</code> 字段，可以图片存在 <code>next/source/images</code> 目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source&#x2F;images): &#x2F;images&#x2F;avatar.jpg</span><br><span class="line"># in site  directory(source&#x2F;uploads): &#x2F;uploads&#x2F;avatar.jpg</span><br><span class="line">avatar: &#x2F;images&#x2F;avatar.jpg</span><br></pre></td></tr></table></figure>

<h4 id="进阶设定"><a href="#进阶设定" class="headerlink" title="进阶设定"></a>进阶设定</h4><p>官方文档介绍的很详细，请首先查阅<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next使用文档</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>网络利器工具</title>
    <url>/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h3><p>用来快速构建网络链接,常用来调试客户端程序。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-i</td>
<td>设置数据包传送的时间间隔</td>
</tr>
<tr>
<td>-l</td>
<td>以服务器方式运行，默认为客户端运行</td>
</tr>
<tr>
<td>-k</td>
<td>重复接受并处理某个端口的所有链接</td>
</tr>
<tr>
<td>-p</td>
<td>以客户端运行时强制使用指定端口</td>
</tr>
<tr>
<td>-C</td>
<td>将CR和LF两个字符作为结束符</td>
</tr>
<tr>
<td>-u</td>
<td>使用UDP协议，默认为TCP协议</td>
</tr>
<tr>
<td>-X</td>
<td>nc客户端余代理服务器通信默认为socks5协议</td>
</tr>
<tr>
<td>-z</td>
<td>扫描目标机器某个范围内服务是否开启</td>
</tr>
</tbody></table>
<h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><table>
<thead>
<tr>
<th>执行任务</th>
<th>执行命令</th>
</tr>
</thead>
<tbody><tr>
<td>扫描机器A端口号在30-40的服务</td>
<td>nc -z A 30-40</td>
</tr>
<tr>
<td>连接服务器A 端口号为5000</td>
<td>nc -C A 5000</td>
</tr>
<tr>
<td>传送文件</td>
<td>MachineA: nc -v -n ip portE: \a.exe</td>
</tr>
</tbody></table>
<h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>实现对网路连通性探测。给地方发送数据包，根据返回的信息初步判断目标机器是否存在或者目标机器操作系统。</p>
<img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ping1.png" class title="This is an test image">
<p>在具体实现中其实使用了ICMP协议，它是一种基于IP协议的控制协议，网际控制协议，其报文格式如下：</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ping2.png" alt="avatar"></p>
<h4 id="字段含义："><a href="#字段含义：" class="headerlink" title="字段含义："></a>字段含义：</h4><ul>
<li>类型：表示ICMP的类型，如果为0表示请求类型，为8表示应答</li>
<li>代码：用来查找产生错误的原因</li>
<li>校验和：检查错误的数据</li>
<li>标识符:使用标识符确认到底是谁发送的控制协议</li>
<li>序列号：唯一确定的一个报文</li>
</ul>
<p>ping命令组装成上述的IP报文进行发送，报文目的地为ping目的地址，原地址为发送ping主机地址，然后按照ICMP的规则填写数据。随后IP报文通过ARP协议，请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址。</p>
<h4 id="ping的详细参数"><a href="#ping的详细参数" class="headerlink" title="ping的详细参数"></a>ping的详细参数</h4><p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ping3.png" alt="avatar"></p>
<h4 id="常用参数："><a href="#常用参数：" class="headerlink" title="常用参数："></a>常用参数：</h4><ul>
<li>[-l] :定义所发送数据包的大小，默认为32字节</li>
<li>[-n] :定义所发数据包的次数，默认为3次</li>
<li>[-t] :表示不间断向目标IP发送数据包</li>
</ul>
<h4 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h4><p>TTL 是 IP 协议包中的一个值，它告诉网络路由器包在网络中的时间是否太长而应被丢弃。</p>
<ul>
<li>TTL设置时间越长，那么缓存时间也就越长，更新也就越不容易生效。增大TTL可以节约域名解析时间从而加快网站的访问。</li>
<li>减小TTL值，减少更换空间时的不可访问时间。</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul>
<li>Request timed out</li>
</ul>
<h4 id="可能出现的情况"><a href="#可能出现的情况" class="headerlink" title="可能出现的情况"></a>可能出现的情况</h4><ul>
<li>对方已经关机或者根本没有这个地址</li>
<li>可能不在同一个网段，即使通过路由也无法找到对方从而出现超时</li>
<li>对方存在但是设置了防火墙过滤</li>
<li>Destination host Unreachable</li>
<li>与对方不在同一个网段且没有设置默认路由</li>
<li>网线出毛病</li>
<li>Bad IP address</li>
<li>要么是IP地址不存在，要么是没有正确连接DNS服务器从而无法解析</li>
</ul>
<h3 id="ifconfig-ipaddr"><a href="#ifconfig-ipaddr" class="headerlink" title="ifconfig/ipaddr"></a>ifconfig/ipaddr</h3><p>查看服务器网卡，IP等信息</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ifconfig1.png" alt="avatar"></p>
<p>上图中被马赛克的位置假设为10.172.100.3，这样就是一个IP地址，凡是都有规则，IP地址按照小数点分割为四部分，每部分占8字节，所以IP地址为32位，那么这样的IP地址一共有多少呢</p>
<p>从而出现IPV6，128位</p>
<p>当时觉得32位很够用了，还将其分为5类，如下图所示</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ifconfig2.png" alt="avatar"></p>
<p>各类地址的主机数量:</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ifconfig3.png" alt="avatar"></p>
<h4 id="无类型域间选路"><a href="#无类型域间选路" class="headerlink" title="无类型域间选路"></a>无类型域间选路</h4><p>CIDR 地址中包含标准的32位IP地址和有关网络前缀位数的信息。比如10.172.100.3/24，IP地址斜杠后面数字24，代表24位是网络号，后面八位为主机号。</p>
<h4 id="计算网络号"><a href="#计算网络号" class="headerlink" title="计算网络号"></a>计算网络号</h4><p>使用IP地址和子网掩码进行AND计算得到网络号。</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/ifconfig4.png" alt="avatar"></p>
<h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><p>和它类似的工具在windows中是wireshark，其采用底层库winpcap/libpcap实现。采用了bpf过滤机制。</p>
<p>不同参数的含义:</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/tcpdump1.png" alt="avatar"></p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><table>
<thead>
<tr>
<th>执行任务</th>
<th>执行命令</th>
</tr>
</thead>
<tbody><tr>
<td>捕获特定网口数据包</td>
<td>tcpdump -i eth0</td>
</tr>
<tr>
<td>捕获特定个数(1000)的包</td>
<td>tcpdump -c 1000 -i eth0</td>
</tr>
<tr>
<td>将捕获的包保存到文件</td>
<td>tcpdump -w a.pcap -i eth0</td>
</tr>
<tr>
<td>读取pcap格式的包</td>
<td>tcpdump -r a.pcap</td>
</tr>
<tr>
<td>增加捕获包的时间戳</td>
<td>tcpdump -n -ttt -i eth0</td>
</tr>
<tr>
<td>指定捕获包的协议类型</td>
<td>tcpdump -i eth0 arp</td>
</tr>
<tr>
<td>捕获指定端口</td>
<td>tcpdump -i eth0 post 22</td>
</tr>
<tr>
<td>捕获特定目标ip+port的包</td>
<td>tcpdump -i eth0 dst address and port 22</td>
</tr>
<tr>
<td>捕获DNS请求和响应</td>
<td>tcpdump -i eth0 -s0 port 53</td>
</tr>
<tr>
<td>匹配Http请求头</td>
<td>tcpdump -s 0 -v -n -l</td>
</tr>
<tr>
<td>捕获特定网口数据包</td>
<td>tcpdump -i eth0</td>
</tr>
<tr>
<td>捕获特定个数(1000)的包</td>
<td>tcpdump -c 1000 -i eth0</td>
</tr>
<tr>
<td>将捕获的包保存到文件</td>
<td>tcpdump -w a.pcap -i eth0</td>
</tr>
<tr>
<td>读取pcap格式的包</td>
<td>tcpdump -r a.pcap</td>
</tr>
<tr>
<td>增加捕获包的时间戳</td>
<td>tcpdump -n -ttt -i eth0</td>
</tr>
<tr>
<td>指定捕获包的协议类型</td>
<td>tcpdump -i eth0 arp</td>
</tr>
<tr>
<td>捕获指定端口</td>
<td>tcpdump -i eth0 post 22</td>
</tr>
<tr>
<td>捕获特定目标ip+port的包</td>
<td>tcpdump -i eth0 dst address and port 22</td>
</tr>
<tr>
<td>捕获DNS请求和响应</td>
<td>tcpdump -i eth0 -s0 port 53</td>
</tr>
<tr>
<td>匹配Http请求头</td>
<td>tcpdump -s 0 -v -n -l | egrep -i “POST /|GET /Host:”</td>
</tr>
</tbody></table>
<h3 id="Isof"><a href="#Isof" class="headerlink" title="Isof"></a>Isof</h3><p>列出当前系统打开的文件描述符工具。可以得知感兴趣的描述符是被哪些进程使用</p>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/Isof1.png" alt="avatar"></p>
<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><table>
<thead>
<tr>
<th>执行任务</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>列出所有的网络链接</td>
<td>lsof -i</td>
</tr>
<tr>
<td>列出所有udp的网络链接</td>
<td>lsof -i udp</td>
</tr>
<tr>
<td>列出谁在使用某个端口</td>
<td>lsof -i :3306</td>
</tr>
<tr>
<td>列出谁在使用特定的tcp端口</td>
<td>lsof -i tcp:80</td>
</tr>
<tr>
<td>根据文件描述范围列出文件信息</td>
<td>lsof -d 2-3</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>udp</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>列出谁在使用某个端口</td>
<td>lsof -i :3306</td>
</tr>
<tr>
<td>列出谁在使用特定的tcp端口</td>
<td>lsof -i tcp:80</td>
</tr>
<tr>
<td>根据文件描述范围列出文件信息</td>
<td>lsof -d 2-3</td>
</tr>
</tbody></table>
<h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>netstat是一个网络信息统计工具。它可以得到网卡接口上全部了解，路由表信息，网卡接口信息等。通常在网络编程中我们用它来显示TCP连接以及状态信息。</p>
<h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/netsat1.png" alt></p>
<h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><table>
<thead>
<tr>
<th>执行任务</th>
<th>执行命令</th>
</tr>
</thead>
<tbody><tr>
<td>列出所有连接</td>
<td>netstat -a</td>
</tr>
<tr>
<td>只列出TCP或者UDP</td>
<td>netstat -at/netstat -au</td>
</tr>
<tr>
<td>列出监听中的连接</td>
<td>netstat -tnl</td>
</tr>
<tr>
<td>获取进程名、进程号以及用户 ID</td>
<td>nestat  -nlpt</td>
</tr>
<tr>
<td>打印统计信息</td>
<td>netstat -s</td>
</tr>
<tr>
<td>netstat持续输出</td>
<td>netstat -ct</td>
</tr>
<tr>
<td>打印active状态的连接</td>
<td>netstat -atnp</td>
</tr>
<tr>
<td>查看服务是否运行(npt)</td>
<td>netstat -aple</td>
</tr>
</tbody></table>
<h3 id="dpkt"><a href="#dpkt" class="headerlink" title="dpkt"></a>dpkt</h3><p>dpkt定义包packet类，它定义了网络报文类型的基础类。其中IP，ICMP等继承于dpkt class，每一个子类有一个_ hdr_ 结构，此结构定义了不同报文的头部，方便取出相应的控制字段。示例如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">import dpkt</span><br><span class="line">import socket</span><br><span class="line">import optparse</span><br><span class="line"></span><br><span class="line">def printPcap(pcap):</span><br><span class="line">    <span class="comment"># 遍历[timestamp, packet]记录的数组</span></span><br><span class="line">    <span class="keyword">for</span> (ts, buf) <span class="keyword">in</span> pcap:</span><br><span class="line">        try:</span><br><span class="line">            <span class="comment"># 获取以太网部分数据</span></span><br><span class="line">            eth = dpkt.ethernet.Ethernet(buf)</span><br><span class="line">            <span class="comment"># 获取IP层数据</span></span><br><span class="line">            ip = eth.data</span><br><span class="line">            <span class="comment"># 把存储在inet_ntoa中的IP地址转换成一个字符串</span></span><br><span class="line">            src = socket.inet_ntoa(ip.src)</span><br><span class="line">            dst = socket.inet_ntoa(ip.dst)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">'[+] 源地址: '</span> + src + <span class="string">' --&gt; 目标地址: '</span> + dst</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = optparse.OptionParser(<span class="string">'[*] Usage : ./pcapTest.py -f &lt;file&gt;'</span>)<span class="comment">#测试包</span></span><br><span class="line">    parser.add_option(<span class="string">'-f'</span>,dest=<span class="string">'fileName'</span>,<span class="built_in">type</span>=<span class="string">'string'</span>,<span class="built_in">help</span>=<span class="string">'specify target filename'</span>)</span><br><span class="line">    (options,args) = parser.parse_args()</span><br><span class="line">    fileName = options.fileName<span class="comment"># 取得包名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> fileName == None:</span><br><span class="line">        <span class="built_in">print</span> parser.usage</span><br><span class="line">        <span class="built_in">exit</span>(0)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#f = open('geotest.pcap')</span></span><br><span class="line">        f = open(fileName)</span><br><span class="line">        pcap = dpkt.pcap.Reader(f)</span><br><span class="line">        printPcap(pcap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="scapy"><a href="#scapy" class="headerlink" title="scapy"></a>scapy</h3><p>“强大的交互式包操作工具”、“支持大量协议的包解析和包构造”、“轻松取代 hping，85% 的 nmap，arpspoof，tcpdump 等等”。不过归根到底，它说的强大功能，都是基于 Scapy 是一个强大的网络数据包操作工具才能实现得了的。只是大概介绍，具体用法官网非常详细，有助于学习网络协议</p>
<p><img src="/2020/07/16/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/scapy.png" alt></p>
]]></content>
      <categories>
        <category>网络工具</category>
      </categories>
      <tags>
        <tag>网络工具</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Hexo框架博客图片不显示的问题</title>
    <url>/2020/07/16/Hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<ol>
<li><p>打开博客所在文件夹blog，找到<code>_config.yml</code>配置文件，修改语句<code>post_asset_folder: true</code></p>
</li>
<li><p>git bash安装插件：<br><code>npm install https://github.com/7ym0n/hexo-asset-image --save</code></p>
</li>
<li><p>每次执行<code>hexo new &quot;文件名&quot;</code>命令时，文件所在文件夹会自动创建一个同名文件夹用于放置资源。</p>
</li>
<li><p>插入图片时用这种方式：<code>{ % raw asset_img test.jpg This is an test image %}</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python包管理工具：Conda和pip比较</title>
    <url>/2020/07/27/pipconda/</url>
    <content><![CDATA[<p>pip是Python Packaging Authority推荐的用于从Python Package Index安装包的工具。pip安装打包为wheels或源代码分发的Python软件。</p>
<p>Conda是跨平台的包和环境管理器，可以安装和管理来自Anaconda repository以 Anaconda Cloud的conda包。 Conda包是二进制文件，徐需要使用编译器来安装它们。另外，conda包不仅限于Python软件。它们还可能包含C或C ++库，R包或任何其他软件。这是conda和pip之间的关键区别。 </p>
<p>pip安装Python包，而conda安装包可能包含用任何语言编写的软件的包。在使用pip之前，必须通过系统包管理器或下载并运行安装程序来安装Python解释器。而Conda可以直接安装Python包以及Python解释器。</p>
<p>另一个区别是conda能够创建可以包含不同版本的Python或其他软件包的隔离环境。在使用数据科学工具时，这非常有用，因为不同的工具可能包含冲突的要求，这些要求可能会阻止它们全部安装到单个环境中。 </p>
<p>pip和conda在如何实现环境中的依赖关系方面也有所不同。安装包时，pip会在递归的串行循环中安装依赖项。没有努力确保同时满足所有包的依赖性。如果较早安装的软件包与稍后安装的软件包具有不兼容的依赖性版本，则可能导致破坏的环境。conda使用可确保满足环境中安装的所有包的所有要求。此检查可能需要额外的时间，但有助于防止创建破坏的环境，前期关于依赖关系包的元数据是正确的。</p>
<p>考虑到conda和pip之间的相似性，有些人试图将这些工具结合起来创建数据科学环境也就不足为奇了。将pip与conda结合的主要原因是有些包只能通过pip安装。 Anaconda创酷提供超过1,500个软件包，包括最流行的数据科学，机器学习和AI框架。这些，以及包括conda-forge和bioconda在内的数据通过Anaconda云提供的数千个附加软件包，可以使用conda进行安装。尽管有大量的软件包，但与PyPI上提供的150,000多个软件包相比，它仍然很小。有时候需要的包没有conda包，但在PyPI上有，可以用pip安装。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy的基本操作</title>
    <url>/2020/07/30/Numpy/</url>
    <content><![CDATA[<h1 id="1-Numpy的基本操作"><a href="#1-Numpy的基本操作" class="headerlink" title="1. Numpy的基本操作"></a>1. Numpy的基本操作</h1><p>导入numpy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<h3 id="1-1-array数组"><a href="#1-1-array数组" class="headerlink" title="1.1 array数组"></a>1.1 array数组</h3><p>定义数组array = [1,2,3,4,5]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">array2 = array + <span class="number">1</span></span><br><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 3, 4, 5, 6])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array2 +array</span><br></pre></td></tr></table></figure>




<pre><code>array([ 3,  5,  7,  9, 11])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array2 * array</span><br></pre></td></tr></table></figure>




<pre><code>array([ 2,  6, 12, 20, 30])</code></pre><h3 id="1-2-数组特性"><a href="#1-2-数组特性" class="headerlink" title="1.2 数组特性"></a>1.2 数组特性</h3><p>查看数组维度信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape</span><br></pre></td></tr></table></figure>




<pre><code>(5,)</code></pre><p>定义二维数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">         [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3],
       [4, 5, 6]])</code></pre><p>列表转为numpy数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">array1</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 2, 3, 4, 5])</code></pre><p>列表数据类型不同时，自动向下转换：int→float→str</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'5'</span>]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">array1</span><br></pre></td></tr></table></figure>




<pre><code>array([&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;], dtype=&apos;&lt;U11&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5.0</span>]</span><br><span class="line">array1 = np.array(list1)</span><br><span class="line">array1</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 2., 3., 4., 5.])</code></pre><h3 id="1-3-数组属性操作"><a href="#1-3-数组属性操作" class="headerlink" title="1.3 数组属性操作"></a>1.3 数组属性操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印当前数据格式</span></span><br><span class="line">type(array1)</span><br></pre></td></tr></table></figure>




<pre><code>numpy.ndarray</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印当前数据类型</span></span><br><span class="line">array1.dtype</span><br></pre></td></tr></table></figure>




<pre><code>dtype(&apos;float64&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印当前数组元素个数</span></span><br><span class="line">array1.size</span><br></pre></td></tr></table></figure>




<pre><code>5</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印当前数组维度</span></span><br><span class="line">array1.ndim</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre><h2 id="2-索引与切片"><a href="#2-索引与切片" class="headerlink" title="2. 索引与切片"></a>2. 索引与切片</h2><h3 id="2-1-数值索引"><a href="#2-1-数值索引" class="headerlink" title="2.1 数值索引"></a>2.1 数值索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array1[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">array1[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array1 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">                  [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line">array1[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">array1</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1,  2,  3],
       [ 4, 10,  6],
       [ 7,  8,  9]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取第二行数据</span></span><br><span class="line">array1[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([ 4, 10,  6])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取所有行的第二列</span></span><br><span class="line">array1[:,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([ 2, 10,  8])</code></pre><h3 id="2-2-bool索引"><a href="#2-2-bool索引" class="headerlink" title="2.2 bool索引"></a>2.2 bool索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mask = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],dtype=bool)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#取所有位置为True的元素</span></span><br><span class="line">array[mask]</span><br></pre></td></tr></table></figure>




<pre><code>array([30, 40, 50, 80, 90])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#(0,1)区间随机生成10个数</span></span><br><span class="line">random_array = np.random.rand(<span class="number">10</span>)</span><br><span class="line">random_array</span><br></pre></td></tr></table></figure>




<pre><code>array([0.14346121, 0.10379705, 0.75719041, 0.3301816 , 0.02267718,
       0.90297419, 0.51393754, 0.99605731, 0.75787412, 0.90175181])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mask = random_array &gt; <span class="number">0.5</span></span><br><span class="line">mask</span><br></pre></td></tr></table></figure>




<pre><code>array([False, False,  True, False, False,  True,  True,  True,  True,
        True])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>])</span><br><span class="line"><span class="comment">#找到符合要求的索引位置</span></span><br><span class="line">np.where(array &gt; <span class="number">30</span>)</span><br></pre></td></tr></table></figure>




<pre><code>(array([3, 4], dtype=int64),)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组对比</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">y = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>])</span><br><span class="line">x ==y</span><br></pre></td></tr></table></figure>




<pre><code>array([ True,  True,  True, False])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#逻辑判断</span></span><br><span class="line">np.logical_and(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>array([ True,  True,  True,  True])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.logical_or(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>array([ True,  True,  True,  True])</code></pre><h2 id="3-数据类型与数值计算"><a href="#3-数据类型与数值计算" class="headerlink" title="3. 数据类型与数值计算"></a>3. 数据类型与数值计算</h2><h3 id="3-1-数据类型"><a href="#3-1-数据类型" class="headerlink" title="3.1 数据类型"></a>3.1 数据类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定数据类型</span></span><br><span class="line">array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],dtype=np.float32)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 2., 3., 4., 5.], dtype=float32)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.dtype</span><br></pre></td></tr></table></figure>




<pre><code>dtype(&apos;float32&apos;)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Numpy中字符串的类型是object，和python不一样</span></span><br><span class="line">array = np.array([<span class="string">'1'</span>,<span class="string">'10'</span>,<span class="string">'3.5'</span>,<span class="string">'str'</span>],dtype=object)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([&apos;1&apos;, &apos;10&apos;, &apos;3.5&apos;, &apos;str&apos;], dtype=object)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对创建好的数据进行数据类型转换</span></span><br><span class="line">array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">array2 = np.asarray(array,dtype=np.float32)</span><br><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 2., 3., 4., 5.], dtype=float32)</code></pre><h3 id="3-2-复制与赋值"><a href="#3-2-复制与赋值" class="headerlink" title="3.2 复制与赋值"></a>3.2 复制与赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#等号赋值，对其中一个变量修改，另一个也发生变化</span></span><br><span class="line">array2 = array</span><br><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 2, 3, 4, 5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([  1, 100,   3,   4,   5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([  1, 100,   3,   4,   5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用copy赋值</span></span><br><span class="line">array2 = array.copy()</span><br><span class="line">array2[<span class="number">1</span>] = <span class="number">1000</span></span><br><span class="line">array2</span><br></pre></td></tr></table></figure>




<pre><code>array([   1, 1000,    3,    4,    5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([  1, 100,   3,   4,   5])</code></pre><h3 id="3-3-数值计算"><a href="#3-3-数值计算" class="headerlink" title="3.3 数值计算"></a>3.3 数值计算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所有元素求和</span></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.sum(array)</span><br></pre></td></tr></table></figure>




<pre><code>21</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按列求和</span></span><br><span class="line">np.sum(array,axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([5, 7, 9])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按行求和</span></span><br><span class="line">np.sum(array,axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([ 6, 15])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#各个元素累乘</span></span><br><span class="line">array.prod()</span><br></pre></td></tr></table></figure>




<pre><code>720</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.prod(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([ 4, 10, 18])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.prod(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([  6, 120])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求元素的最小值</span></span><br><span class="line">array.min()</span><br></pre></td></tr></table></figure>




<pre><code>1</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.min(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 2, 3])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.min(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([1, 4])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求均值</span></span><br><span class="line">array.mean()</span><br></pre></td></tr></table></figure>




<pre><code>3.5</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.mean(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([2.5, 3.5, 4.5])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.mean(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([2., 5.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求标准差</span></span><br><span class="line">array.std()</span><br></pre></td></tr></table></figure>




<pre><code>1.707825127659933</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求方差</span></span><br><span class="line">array.var()</span><br></pre></td></tr></table></figure>




<pre><code>2.9166666666666665</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#比2小的全部为2，比4大的全部为4</span></span><br><span class="line">array.clip(<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[2, 2, 3],
       [4, 4, 4]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#四舍五入</span></span><br><span class="line">array = np.array([<span class="number">1.2</span>,<span class="number">3.56</span>,<span class="number">6.41</span>])</span><br><span class="line">array.round()</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 4., 6.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定精度</span></span><br><span class="line">array.round(decimals=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([1.2, 3.6, 6.4])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最小值索引位置</span></span><br><span class="line">array.argmin()</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.argmin(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>




<pre><code>0</code></pre><h3 id="3-4-矩阵乘法"><a href="#3-4-矩阵乘法" class="headerlink" title="3.4 矩阵乘法"></a>3.4 矩阵乘法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对应元素相乘</span></span><br><span class="line">x = np.array([<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line">np.multiply(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>array([ 6, 20])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#矩阵乘法</span></span><br><span class="line">np.dot(x,y)</span><br></pre></td></tr></table></figure>




<pre><code>26</code></pre><h2 id="4-常用功能模块"><a href="#4-常用功能模块" class="headerlink" title="4. 常用功能模块"></a>4. 常用功能模块</h2><h3 id="4-1-排序操作"><a href="#4-1-排序操作" class="headerlink" title="4.1 排序操作"></a>4.1 排序操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.array([[<span class="number">1.2</span>,<span class="number">5.2</span>,<span class="number">3.4</span>],[<span class="number">5.7</span>,<span class="number">3.1</span>,<span class="number">7.1</span>]])</span><br><span class="line">np.sort(array)</span><br></pre></td></tr></table></figure>




<pre><code>array([[1.2, 3.4, 5.2],
       [3.1, 5.7, 7.1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#排序后显示索引位置</span></span><br><span class="line">np.argsort(array)</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 2, 1],
       [1, 0, 2]], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在（0,10）之间生成10个随机数</span></span><br><span class="line">array = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([ 0.        ,  1.11111111,  2.22222222,  3.33333333,  4.44444444,
        5.55555556,  6.66666667,  7.77777778,  8.88888889, 10.        ])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">values = np.array([<span class="number">3.5</span>,<span class="number">2.7</span>,<span class="number">5.8</span>])</span><br><span class="line">np.searchsorted(array,values)</span><br></pre></td></tr></table></figure>




<pre><code>array([4, 3, 6], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">45</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>]])</span><br><span class="line">index = np.lexsort([<span class="number">-1</span>*array[:,<span class="number">0</span>]])</span><br><span class="line">index</span><br></pre></td></tr></table></figure>




<pre><code>array([2, 3, 0, 1], dtype=int64)</code></pre><h3 id="4-2-数组形状"><a href="#4-2-数组形状" class="headerlink" title="4.2 数组形状"></a>4.2 数组形状</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.arange(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape</span><br></pre></td></tr></table></figure>




<pre><code>(10,)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape = <span class="number">2</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 1, 2, 3, 4],
       [5, 6, 7, 8, 9]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = np.arange(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">array = array[np.newaxis,:]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape</span><br></pre></td></tr></table></figure>




<pre><code>(1, 10)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.squeeze()</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.shape</span><br></pre></td></tr></table></figure>




<pre><code>(1, 10)</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数组转置</span></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>],[<span class="number">6</span>,<span class="number">4</span>,<span class="number">1</span>]])</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3],
       [2, 5, 3],
       [6, 4, 1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#为啥不行呢？</span></span><br><span class="line">array.transpose()</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3],
       [2, 5, 3],
       [6, 4, 1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array.T</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 6],
       [2, 5, 4],
       [3, 3, 1]])</code></pre><h3 id="4-3-数组的拼接"><a href="#4-3-数组的拼接" class="headerlink" title="4.3 数组的拼接"></a>4.3 数组的拼接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line">np.concatenate((a,b))</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 11, 12]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.concatenate((a,b),axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1,  2,  3,  7,  8,  9],
       [ 4,  5,  6, 10, 11, 12]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#另一种拼接方法,直接增加一个维度</span></span><br><span class="line">np.stack((a,b))</span><br></pre></td></tr></table></figure>




<pre><code>array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])</code></pre><h3 id="4-4-创建数组函数"><a href="#4-4-创建数组函数" class="headerlink" title="4.4 创建数组函数"></a>4.4 创建数组函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.arange(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#快速创建行向量</span></span><br><span class="line">np.r_[<span class="number">0</span>:<span class="number">5</span>:<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([0, 1, 2, 3, 4])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#快速创建列向量</span></span><br><span class="line">np.c_[<span class="number">0</span>:<span class="number">5</span>:<span class="number">1</span>]</span><br></pre></td></tr></table></figure>




<pre><code>array([[0],
       [1],
       [2],
       [3],
       [4]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建零矩阵</span></span><br><span class="line">np.zeros(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([0., 0., 0.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.zeros((<span class="number">3</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">3</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.ones((<span class="number">3</span>,<span class="number">3</span>)) * <span class="number">8</span></span><br></pre></td></tr></table></figure>




<pre><code>array([[8., 8., 8.],
       [8., 8., 8.],
       [8., 8., 8.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.empty(<span class="number">6</span>)</span><br><span class="line">a.fill(<span class="number">1</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>




<pre><code>array([1., 1., 1., 1., 1., 1.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.identity(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])</code></pre><h3 id="4-5-随机模块"><a href="#4-5-随机模块" class="headerlink" title="4.5 随机模块"></a>4.5 随机模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.rand(<span class="number">3</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[0.58755743, 0.58962059],
       [0.03991693, 0.00247106],
       [0.44385432, 0.09460355]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回区间（0,10）的随机整数</span></span><br><span class="line">np.random.randint(<span class="number">10</span>,size = (<span class="number">5</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>




<pre><code>array([[0, 2, 9, 2],
       [3, 5, 9, 1],
       [2, 4, 0, 9],
       [9, 8, 1, 1],
       [5, 2, 2, 1]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([8, 2, 4])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定随机种子，固定随机结果</span></span><br><span class="line">np.random.seed(<span class="number">100</span>)</span><br><span class="line">array = np.random.rand(<span class="number">10</span>)</span><br><span class="line">array</span><br></pre></td></tr></table></figure>




<pre><code>array([0.54340494, 0.27836939, 0.42451759, 0.84477613, 0.00471886,
       0.12156912, 0.67074908, 0.82585276, 0.13670659, 0.57509333])</code></pre><h3 id="4-6-文件读写"><a href="#4-6-文件读写" class="headerlink" title="4.6 文件读写"></a>4.6 文件读写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Notebook写文件</span></span><br><span class="line"><span class="comment">#%%writefile array.txt</span></span><br><span class="line"><span class="comment">#貌似要写在代码第一行才行？ 此命令前不能加注释！</span></span><br><span class="line">data =  open (<span class="string">'array.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">data.write(<span class="string">"4575\n1234"</span>)</span><br><span class="line">data.close()</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python读取数据比较复杂</span></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'array.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        fileds = line.split()</span><br><span class="line">        cur_data = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> fileds]</span><br><span class="line">        data.append(cur_data)</span><br><span class="line">data = np.array(data)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<pre><code>array([[4575.],
       [1234.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Numpy读取数据</span></span><br><span class="line">data = np.loadtxt(<span class="string">"array.txt"</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<pre><code>array([4575., 1234.])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%writefile array2.txt</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line"><span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span></span><br></pre></td></tr></table></figure>

<pre><code>Writing array2.txt</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据中带有分隔符‘，’，读取数据是指明,否则报错</span></span><br><span class="line">data = np.loadtxt(<span class="string">"array2.txt"</span>,delimiter = <span class="string">','</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<pre><code>array([[1., 2., 3., 4.],
       [5., 6., 7., 8.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%writefile array2.txt</span><br><span class="line">a,b,c,d,e,f</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"><span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span></span><br></pre></td></tr></table></figure>

<pre><code>Overwriting array2.txt</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以指定读取数据时去掉前几行元素</span></span><br><span class="line">data = np.loadtxt(<span class="string">"array2.txt"</span>,delimiter = <span class="string">','</span>,skiprows = <span class="number">1</span>)</span><br><span class="line">data</span><br></pre></td></tr></table></figure>




<pre><code>array([[ 1.,  2.,  3.,  4.,  5.,  6.],
       [ 7.,  8.,  9., 10., 11., 12.]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看np.loadtxt的功能</span></span><br><span class="line">print(help(np.loadtxt))</span><br></pre></td></tr></table></figure>

<pre><code>Help on function loadtxt in module numpy:

loadtxt(fname, dtype=&lt;class &apos;float&apos;&gt;, comments=&apos;#&apos;, delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding=&apos;bytes&apos;, max_rows=None)
    Load data from a text file.

    Each row in the text file must have the same number of values.

    Parameters
    ----------
    fname : file, str, or pathlib.Path
        File, filename, or generator to read.  If the filename extension is
        ``.gz`` or ``.bz2``, the file is first decompressed. Note that
        generators should return byte strings for Python 3k.
    dtype : data-type, optional
        Data-type of the resulting array; default: float.  If this is a
        structured data-type, the resulting array will be 1-dimensional, and
        each row will be interpreted as an element of the array.  In this
        case, the number of columns used must match the number of fields in
        the data-type.
    comments : str or sequence of str, optional
        The characters or list of characters used to indicate the start of a
        comment. None implies no comments. For backwards compatibility, byte
        strings will be decoded as &apos;latin1&apos;. The default is &apos;#&apos;.
    delimiter : str, optional
        The string used to separate values. For backwards compatibility, byte
        strings will be decoded as &apos;latin1&apos;. The default is whitespace.
    converters : dict, optional
        A dictionary mapping column number to a function that will parse the
        column string into the desired value.  E.g., if column 0 is a date
        string: ``converters = {0: datestr2num}``.  Converters can also be
        used to provide a default value for missing data (but see also
        `genfromtxt`): ``converters = {3: lambda s: float(s.strip() or 0)}``.
        Default: None.
    skiprows : int, optional
        Skip the first `skiprows` lines; default: 0.
    usecols : int or sequence, optional
        Which columns to read, with 0 being the first. For example,
        ``usecols = (1,4,5)`` will extract the 2nd, 5th and 6th columns.
        The default, None, results in all columns being read.

        .. versionchanged:: 1.11.0
            When a single column has to be read it is possible to use
            an integer instead of a tuple. E.g ``usecols = 3`` reads the
            fourth column the same way as ``usecols = (3,)`` would.
    unpack : bool, optional
        If True, the returned array is transposed, so that arguments may be
        unpacked using ``x, y, z = loadtxt(...)``.  When used with a structured
        data-type, arrays are returned for each field.  Default is False.
    ndmin : int, optional
        The returned array will have at least `ndmin` dimensions.
        Otherwise mono-dimensional axes will be squeezed.
        Legal values: 0 (default), 1 or 2.

        .. versionadded:: 1.6.0
    encoding : str, optional
        Encoding used to decode the inputfile. Does not apply to input streams.
        The special value &apos;bytes&apos; enables backward compatibility workarounds
        that ensures you receive byte arrays as results if possible and passes
        &apos;latin1&apos; encoded strings to converters. Override this value to receive
        unicode arrays and pass strings as input to converters.  If set to None
        the system default is used. The default value is &apos;bytes&apos;.

        .. versionadded:: 1.14.0
    max_rows : int, optional
        Read `max_rows` lines of content after `skiprows` lines. The default
        is to read all the lines.

        .. versionadded:: 1.16.0

    Returns
    -------
    out : ndarray
        Data read from the text file.

    See Also
    --------
    load, fromstring, fromregex
    genfromtxt : Load data with missing values handled as specified.
    scipy.io.loadmat : reads MATLAB data files

    Notes
    -----
    This function aims to be a fast reader for simply formatted files.  The
    `genfromtxt` function provides more sophisticated handling of, e.g.,
    lines with missing values.

    .. versionadded:: 1.10.0

    The strings produced by the Python float.hex method can be used as
    input for floats.

    Examples
    --------
    &gt;&gt;&gt; from io import StringIO   # StringIO behaves like a file object
    &gt;&gt;&gt; c = StringIO(u&quot;0 1\n2 3&quot;)
    &gt;&gt;&gt; np.loadtxt(c)
    array([[ 0.,  1.],
           [ 2.,  3.]])

    &gt;&gt;&gt; d = StringIO(u&quot;M 21 72\nF 35 58&quot;)
    &gt;&gt;&gt; np.loadtxt(d, dtype={&apos;names&apos;: (&apos;gender&apos;, &apos;age&apos;, &apos;weight&apos;),
    ...                      &apos;formats&apos;: (&apos;S1&apos;, &apos;i4&apos;, &apos;f4&apos;)})
    array([(&apos;M&apos;, 21, 72.0), (&apos;F&apos;, 35, 58.0)],
          dtype=[(&apos;gender&apos;, &apos;|S1&apos;), (&apos;age&apos;, &apos;&lt;i4&apos;), (&apos;weight&apos;, &apos;&lt;f4&apos;)])

    &gt;&gt;&gt; c = StringIO(u&quot;1,0,2\n3,0,4&quot;)
    &gt;&gt;&gt; x, y = np.loadtxt(c, delimiter=&apos;,&apos;, usecols=(0, 2), unpack=True)
    &gt;&gt;&gt; x
    array([ 1.,  3.])
    &gt;&gt;&gt; y
    array([ 2.,  4.])

None</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Numpy写文件操作</span></span><br><span class="line">np.savetxt(<span class="string">"array4.txt"</span>, array, delimiter = <span class="string">','</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将数据文件保存为Numpy数组格式".npy",可以将机器学习训练的模型参数保存为此格式</span></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">np.save(<span class="string">"array.npy"</span>, array)</span><br><span class="line">np.load(<span class="string">"array.npy"</span>)</span><br></pre></td></tr></table></figure>




<pre><code>array([[1, 2, 3],
       [4, 5, 6]])</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Numpy</category>
      </categories>
      <tags>
        <tag>Numpy</tag>
      </tags>
  </entry>
</search>
